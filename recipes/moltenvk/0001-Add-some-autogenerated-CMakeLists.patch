From 1580700d6dd71454416f1285ca9e2b9a3ffc3598 Mon Sep 17 00:00:00 2001
From: Ray Donnelly <mingw.android@gmail.com>
Date: Sun, 10 Nov 2019 01:12:43 +0100
Subject: [PATCH] Add some autogenerated CMakeLists

These were generated via:

```
declare -a XC_TO_CM=()
XC_TO_CM+=('/Users/rdonnelly/brew/Cellar/mulle-xcode-to-cmake/0.9.0/bin/mulle-xcode-to-cmake')
XC_TO_CM+=('-2')
XC_TO_CM+=('-d')

"${XC_TO_CM[@]}" export ExternalDependencies.xcodeproj > ExternalDependencies.CMakeList.txt
sed -i.bak 's|CMakeSourcesAndHeaders.txt|ExternalDependencies.CMakeSourcesAndHeaders.txt|g' ExternalDependencies.CMakeList.txt
rm ExternalDependencies.CMakeList.txt.bak
"${XC_TO_CM[@]}" sexport ExternalDependencies.xcodeproj > ExternalDependencies.CMakeSourcesAndHeaders.txt

"${XC_TO_CM[@]}" export MoltenVKPackaging.xcodeproj > MoltenVKPackaging.CMakeList.txt
sed -i.bak 's|CMakeSourcesAndHeaders.txt|MoltenVKPackaging.CMakeSourcesAndHeaders.txt|g' MoltenVKPackaging.CMakeList.txt
rm MoltenVKPackaging.CMakeList.txt.bak
"${XC_TO_CM[@]}" sexport MoltenVKPackaging.xcodeproj > MoltenVKPackaging.CMakeSourcesAndHeaders.txt

PROJSUBDIRS=()
while IFS=  read -r -d $'\0'; do
    PROJSUBDIRS+=("$REPLY")
done < <(find . -mindepth 2 -name "*.xcodeproj" -print0)

for PROJSUBDIR in "${PROJSUBDIRS[@]}"; do
  echo $PROJSUBDIR
  pushd $(dirname "${PROJSUBDIR}")
    BASENAME=$(basename "${PROJSUBDIR}")
    echo ${BASENAME}
    "${XC_TO_CM[@]}" export ${BASENAME} > CMakeLists.txt
    "${XC_TO_CM[@]}" sexport ${BASENAME} > CMakeSourcesAndHeaders.txt
  popd
done
git add . && git commit --amend
```
---
 .../API-Samples/CMakeLists.txt                |  203 +++
 .../API-Samples/CMakeSourcesAndHeaders.txt    |   66 +
 .../LunarG-VulkanSamples/Cube/CMakeLists.txt  |  193 +++
 .../Cube/CMakeSourcesAndHeaders.txt           |   46 +
 .../Hologram/CMakeLists.txt                   |  195 +++
 .../Hologram/CMakeSourcesAndHeaders.txt       |   60 +
 ExternalDependencies.CMakeList.txt            |  529 ++++++++
 ...nalDependencies.CMakeSourcesAndHeaders.txt | 1157 +++++++++++++++++
 MoltenVK/CMakeLists.txt                       |  183 +++
 MoltenVK/CMakeSourcesAndHeaders.txt           |  280 ++++
 MoltenVKPackaging.CMakeList.txt               |  184 +++
 MoltenVKPackaging.CMakeLists.txt              |  184 +++
 MoltenVKPackaging.CMakeSourcesAndHeaders.txt  |   19 +
 MoltenVKShaderConverter/CMakeLists.txt        |  483 +++++++
 .../CMakeSourcesAndHeaders.txt                |  149 +++
 15 files changed, 3931 insertions(+)
 create mode 100644 Demos/LunarG-VulkanSamples/API-Samples/CMakeLists.txt
 create mode 100644 Demos/LunarG-VulkanSamples/API-Samples/CMakeSourcesAndHeaders.txt
 create mode 100644 Demos/LunarG-VulkanSamples/Cube/CMakeLists.txt
 create mode 100644 Demos/LunarG-VulkanSamples/Cube/CMakeSourcesAndHeaders.txt
 create mode 100644 Demos/LunarG-VulkanSamples/Hologram/CMakeLists.txt
 create mode 100644 Demos/LunarG-VulkanSamples/Hologram/CMakeSourcesAndHeaders.txt
 create mode 100644 ExternalDependencies.CMakeList.txt
 create mode 100644 ExternalDependencies.CMakeSourcesAndHeaders.txt
 create mode 100644 MoltenVK/CMakeLists.txt
 create mode 100644 MoltenVK/CMakeSourcesAndHeaders.txt
 create mode 100644 MoltenVKPackaging.CMakeList.txt
 create mode 100644 MoltenVKPackaging.CMakeLists.txt
 create mode 100644 MoltenVKPackaging.CMakeSourcesAndHeaders.txt
 create mode 100644 MoltenVKShaderConverter/CMakeLists.txt
 create mode 100644 MoltenVKShaderConverter/CMakeSourcesAndHeaders.txt

diff --git a/Demos/LunarG-VulkanSamples/API-Samples/CMakeLists.txt b/Demos/LunarG-VulkanSamples/API-Samples/CMakeLists.txt
new file mode 100644
index 0000000..11af5f4
--- /dev/null
+++ b/Demos/LunarG-VulkanSamples/API-Samples/CMakeLists.txt
@@ -0,0 +1,203 @@
+# Generated on 2019-11-10 1:31:50 by version 0.9.0 of mulle-xcode-to-cmake
+# Command line:
+#    mulle-xcode-to-cmake -2 -d export API-Samples.xcodeproj
+
+
+cmake_minimum_required (VERSION 3.4)
+project( API-Samples C)
+
+# ###
+# Build for mulle-objc (https://mulle-objc.github.io/):
+#
+#    mulle-sde init -m foundation/objc-porter executable
+#    mulle-sde craft
+#
+# [mulle-clang >= 8.0.0.0 and mulle-objc >= 0.15 required]
+#
+
+if( NOT DEPENDENCY_DIR)
+   set( DEPENDENCY_DIR "$ENV{DEPENDENCY_DIR}")
+endif()
+if( NOT DEPENDENCY_DIR)
+   set( DEPENDENCY_DIR "${PROJECT_SOURCE_DIR}/dependency")
+endif()
+if( EXISTS "${DEPENDENCY_DIR}")
+   if( NOT ADDICTION_DIR)
+      get_filename_component( ADDICTION_DIR "${DEPENDENCY_DIR}" DIRECTORY)
+      set( ADDICTION_DIR "${ADDICTION_DIR}/addiction")
+   endif()
+   set( CMAKE_FIND_FRAMEWORK "LAST")
+   include_directories( BEFORE SYSTEM
+      ${DEPENDENCY_DIR}/include
+      ${ADDICTION_DIR}/include
+   )
+   set( CMAKE_FRAMEWORK_PATH
+      ${DEPENDENCY_DIR}/Frameworks
+      ${ADDICTION_DIR}/Frameworks
+      ${CMAKE_FRAMEWORK_PATH}
+   )
+   set( CMAKE_LIBRARY_PATH
+      ${DEPENDENCY_DIR}/lib
+      ${ADDICTION_DIR}/lib
+      ${CMAKE_LIBRARY_PATH}
+   )
+   set( SKIP_FIND_FOUNDATION_LIBRARY ON)
+   execute_process( COMMAND mulle-sde stash-dir
+                    OUTPUT_VARIABLE MULLE_SOURCETREE_STASH_DIR)
+   string( STRIP "${MULLE_SOURCETREE_STASH_DIR}" MULLE_SOURCETREE_STASH_DIR)
+   execute_process( COMMAND mulle-sde linkorder --stash-dir "${MULLE_SOURCETREE_STASH_DIR}" --startup --simplify --output-format cmake
+                    WORKING_DIRECTORY "${PROJECT_SOURCE_DIR}"
+                    OUTPUT_VARIABLE MULLE_SDE_LINKER_FLAGS
+                    RESULT_VARIABLE RVAL)
+   if( NOT ${RVAL} EQUAL 0)
+      message( FATAL_ERROR "Failed to procure linkorder from mulle-sde. Old version ?")
+   endif()
+   message( STATUS "MULLE_SDE_LINKER_FLAGS=\"${MULLE_SDE_LINKER_FLAGS}\"")
+else()
+   message( STATUS "Not a mulle-sde build (\"${DEPENDENCY_DIR}\" does not exist)")
+endif()
+
+
+#
+# Platform specific definitions
+#
+
+if( APPLE)
+   # # CMAKE_OSX_SYSROOT must be set for CMAKE_OSX_DEPLOYMENT_TARGET (cmake bug)
+   # if( NOT CMAKE_OSX_SYSROOT)
+   #    set( CMAKE_OSX_SYSROOT "/" CACHE STRING "SDK for OSX" FORCE)   # means current OS X
+   # endif()
+   #
+   # # baseline set to 10.6 for rpath
+   # if( NOT CMAKE_OSX_DEPLOYMENT_TARGET)
+   #   set(CMAKE_OSX_DEPLOYMENT_TARGET "10.6" CACHE STRING "Deployment target for OSX" FORCE)
+   # endif()
+
+   set( CMAKE_POSITION_INDEPENDENT_CODE FALSE)
+   set( CMAKE_INSTALL_RPATH "@rpath/../lib")
+
+   set( BEGIN_ALL_LOAD "-all_load")
+   set( END_ALL_LOAD)
+else()
+   set( CMAKE_POSITION_INDEPENDENT_CODE TRUE)
+
+   if( WIN32)
+   # windows
+   else()
+   # linux / gcc
+      set( BEGIN_ALL_LOAD "-Wl,--whole-archive")
+      set( END_ALL_LOAD "-Wl,--no-whole-archive")
+      set( CMAKE_INSTALL_RPATH "\$ORIGIN/../lib")
+   endif()
+endif()
+
+##
+## Produce CMakeSourcesAndHeaders.txt with:
+##   mulle-xcode-to-cmake -t 'API-Samples-iOS' -t 'API-Samples-macOS' sexport > CMakeSourcesAndHeaders.txt
+##
+
+include( CMakeSourcesAndHeaders.txt)
+
+# uncomment this for mulle-objc to search libraries first
+# set( CMAKE_FIND_FRAMEWORK "LAST")
+
+set( API__SAMPLES_I_OS_STATIC_DEPENDENCIES
+)
+
+if( NOT SKIP_FIND_FOUNDATION_LIBRARY)
+   find_library( FOUNDATION_LIBRARY Foundation)
+   message( STATUS "FOUNDATION_LIBRARY is ${FOUNDATION_LIBRARY}")
+endif()
+if( NOT SKIP_FIND_MOLTEN_VK_LIBRARY)
+   find_library( MOLTEN_VK_LIBRARY MoltenVK)
+   message( STATUS "MOLTEN_VK_LIBRARY is ${MOLTEN_VK_LIBRARY}")
+endif()
+if( NOT SKIP_FIND_MOLTEN_VKGLSLTO_SPIRVCONVERTER_LIBRARY)
+   find_library( MOLTEN_VKGLSLTO_SPIRVCONVERTER_LIBRARY MoltenVKGLSLToSPIRVConverter)
+   message( STATUS "MOLTEN_VKGLSLTO_SPIRVCONVERTER_LIBRARY is ${MOLTEN_VKGLSLTO_SPIRVCONVERTER_LIBRARY}")
+endif()
+
+set( API__SAMPLES_I_OS_DEPENDENCIES
+${FOUNDATION_LIBRARY}
+${MOLTEN_VK_LIBRARY}
+${MOLTEN_VKGLSLTO_SPIRVCONVERTER_LIBRARY}
+)
+
+# uncomment this for mulle-objc to search libraries first
+# set( CMAKE_FIND_FRAMEWORK "LAST")
+
+set( API__SAMPLES_MAC_OS_STATIC_DEPENDENCIES
+)
+
+if( NOT SKIP_FIND_FOUNDATION_LIBRARY)
+   find_library( FOUNDATION_LIBRARY Foundation)
+   message( STATUS "FOUNDATION_LIBRARY is ${FOUNDATION_LIBRARY}")
+endif()
+if( NOT SKIP_FIND_MOLTEN_VK_LIBRARY)
+   find_library( MOLTEN_VK_LIBRARY MoltenVK)
+   message( STATUS "MOLTEN_VK_LIBRARY is ${MOLTEN_VK_LIBRARY}")
+endif()
+if( NOT SKIP_FIND_MOLTEN_VKGLSLTO_SPIRVCONVERTER_LIBRARY)
+   find_library( MOLTEN_VKGLSLTO_SPIRVCONVERTER_LIBRARY MoltenVKGLSLToSPIRVConverter)
+   message( STATUS "MOLTEN_VKGLSLTO_SPIRVCONVERTER_LIBRARY is ${MOLTEN_VKGLSLTO_SPIRVCONVERTER_LIBRARY}")
+endif()
+
+set( API__SAMPLES_MAC_OS_DEPENDENCIES
+${FOUNDATION_LIBRARY}
+${MOLTEN_VK_LIBRARY}
+${MOLTEN_VKGLSLTO_SPIRVCONVERTER_LIBRARY}
+)
+
+add_library( API-Samples-iOS STATIC
+${API__SAMPLES_I_OS_SOURCES}
+${API__SAMPLES_I_OS_PUBLIC_HEADERS}
+${API__SAMPLES_I_OS_PROJECT_HEADERS}
+${API__SAMPLES_I_OS_PRIVATE_HEADERS}
+${API__SAMPLES_I_OS_RESOURCES}
+)
+
+install( TARGETS API-Samples-iOS DESTINATION "lib")
+install( FILES ${API__SAMPLES_I_OS_PUBLIC_HEADERS} DESTINATION "include/API-Samples-iOS")
+
+
+##
+## API-Samples-iOS_shared
+##
+
+add_library( API-Samples-iOS_shared SHARED
+${API__SAMPLES_I_OS_SOURCES}
+)
+
+set_target_properties( API-Samples-iOS_shared
+   PROPERTIES
+   OUTPUT_NAME API-Samples-iOS)
+)
+
+install( TARGETS API-Samples-iOS_shared DESTINATION "lib")
+
+add_library( API-Samples-macOS STATIC
+${API__SAMPLES_MAC_OS_SOURCES}
+${API__SAMPLES_MAC_OS_PUBLIC_HEADERS}
+${API__SAMPLES_MAC_OS_PROJECT_HEADERS}
+${API__SAMPLES_MAC_OS_PRIVATE_HEADERS}
+${API__SAMPLES_MAC_OS_RESOURCES}
+)
+
+install( TARGETS API-Samples-macOS DESTINATION "lib")
+install( FILES ${API__SAMPLES_MAC_OS_PUBLIC_HEADERS} DESTINATION "include/API-Samples-macOS")
+
+
+##
+## API-Samples-macOS_shared
+##
+
+add_library( API-Samples-macOS_shared SHARED
+${API__SAMPLES_MAC_OS_SOURCES}
+)
+
+set_target_properties( API-Samples-macOS_shared
+   PROPERTIES
+   OUTPUT_NAME API-Samples-macOS)
+)
+
+install( TARGETS API-Samples-macOS_shared DESTINATION "lib")
diff --git a/Demos/LunarG-VulkanSamples/API-Samples/CMakeSourcesAndHeaders.txt b/Demos/LunarG-VulkanSamples/API-Samples/CMakeSourcesAndHeaders.txt
new file mode 100644
index 0000000..39fa04e
--- /dev/null
+++ b/Demos/LunarG-VulkanSamples/API-Samples/CMakeSourcesAndHeaders.txt
@@ -0,0 +1,66 @@
+# Generated on 2019-11-10 1:31:50 by version 0.9.0 of mulle-xcode-to-cmake
+# Command line:
+#    mulle-xcode-to-cmake -2 -d sexport API-Samples.xcodeproj
+
+
+
+##
+## API-Samples-iOS Files
+##
+
+set( API__SAMPLES_I_OS_GLOBAL_RESOURCES
+../VulkanSamples/API-Samples/data/blue.ppm
+../VulkanSamples/API-Samples/data/green.ppm
+../VulkanSamples/API-Samples/data/logo-256x256-solid.png
+../VulkanSamples/API-Samples/data/logo-256x256.png
+../VulkanSamples/API-Samples/data/lunarg.ppm
+../VulkanSamples/API-Samples/data/red.ppm
+../VulkanSamples/API-Samples/data/spotlight.ppm
+../VulkanSamples/API-Samples/data/yellow.ppm
+iOS/Resources/Default-568h@2x.png
+"iOS/Resources/Default~ipad.png"
+iOS/Resources/Icon.png
+iOS/Resources/Main.storyboard
+)
+
+set( API__SAMPLES_I_OS_RESOURCES
+   ${API__SAMPLES_I_OS_GLOBAL_RESOURCES}
+)
+
+set( API__SAMPLES_I_OS_SOURCES
+../VulkanSamples/API-Samples/utils/util.cpp
+../VulkanSamples/API-Samples/utils/util_init.cpp
+iOS/AppDelegate.m
+iOS/DemoViewController.mm
+iOS/main.m
+)
+
+
+##
+## API-Samples-macOS Files
+##
+
+set( API__SAMPLES_MAC_OS_GLOBAL_RESOURCES
+../VulkanSamples/API-Samples/data/blue.ppm
+../VulkanSamples/API-Samples/data/green.ppm
+../VulkanSamples/API-Samples/data/logo-256x256-solid.png
+../VulkanSamples/API-Samples/data/logo-256x256.png
+../VulkanSamples/API-Samples/data/lunarg.ppm
+../VulkanSamples/API-Samples/data/red.ppm
+../VulkanSamples/API-Samples/data/spotlight.ppm
+../VulkanSamples/API-Samples/data/yellow.ppm
+macOS/Resources/Main.storyboard
+macOS/Resources/macOS.xcassets
+)
+
+set( API__SAMPLES_MAC_OS_RESOURCES
+   ${API__SAMPLES_MAC_OS_GLOBAL_RESOURCES}
+)
+
+set( API__SAMPLES_MAC_OS_SOURCES
+../VulkanSamples/API-Samples/utils/util.cpp
+../VulkanSamples/API-Samples/utils/util_init.cpp
+macOS/AppDelegate.m
+macOS/DemoViewController.mm
+macOS/main.m
+)
diff --git a/Demos/LunarG-VulkanSamples/Cube/CMakeLists.txt b/Demos/LunarG-VulkanSamples/Cube/CMakeLists.txt
new file mode 100644
index 0000000..4470e96
--- /dev/null
+++ b/Demos/LunarG-VulkanSamples/Cube/CMakeLists.txt
@@ -0,0 +1,193 @@
+# Generated on 2019-11-10 1:31:50 by version 0.9.0 of mulle-xcode-to-cmake
+# Command line:
+#    mulle-xcode-to-cmake -2 -d export Cube.xcodeproj
+
+
+cmake_minimum_required (VERSION 3.4)
+project( Cube C)
+
+# ###
+# Build for mulle-objc (https://mulle-objc.github.io/):
+#
+#    mulle-sde init -m foundation/objc-porter executable
+#    mulle-sde craft
+#
+# [mulle-clang >= 8.0.0.0 and mulle-objc >= 0.15 required]
+#
+
+if( NOT DEPENDENCY_DIR)
+   set( DEPENDENCY_DIR "$ENV{DEPENDENCY_DIR}")
+endif()
+if( NOT DEPENDENCY_DIR)
+   set( DEPENDENCY_DIR "${PROJECT_SOURCE_DIR}/dependency")
+endif()
+if( EXISTS "${DEPENDENCY_DIR}")
+   if( NOT ADDICTION_DIR)
+      get_filename_component( ADDICTION_DIR "${DEPENDENCY_DIR}" DIRECTORY)
+      set( ADDICTION_DIR "${ADDICTION_DIR}/addiction")
+   endif()
+   set( CMAKE_FIND_FRAMEWORK "LAST")
+   include_directories( BEFORE SYSTEM
+      ${DEPENDENCY_DIR}/include
+      ${ADDICTION_DIR}/include
+   )
+   set( CMAKE_FRAMEWORK_PATH
+      ${DEPENDENCY_DIR}/Frameworks
+      ${ADDICTION_DIR}/Frameworks
+      ${CMAKE_FRAMEWORK_PATH}
+   )
+   set( CMAKE_LIBRARY_PATH
+      ${DEPENDENCY_DIR}/lib
+      ${ADDICTION_DIR}/lib
+      ${CMAKE_LIBRARY_PATH}
+   )
+   set( SKIP_FIND_FOUNDATION_LIBRARY ON)
+   execute_process( COMMAND mulle-sde stash-dir
+                    OUTPUT_VARIABLE MULLE_SOURCETREE_STASH_DIR)
+   string( STRIP "${MULLE_SOURCETREE_STASH_DIR}" MULLE_SOURCETREE_STASH_DIR)
+   execute_process( COMMAND mulle-sde linkorder --stash-dir "${MULLE_SOURCETREE_STASH_DIR}" --startup --simplify --output-format cmake
+                    WORKING_DIRECTORY "${PROJECT_SOURCE_DIR}"
+                    OUTPUT_VARIABLE MULLE_SDE_LINKER_FLAGS
+                    RESULT_VARIABLE RVAL)
+   if( NOT ${RVAL} EQUAL 0)
+      message( FATAL_ERROR "Failed to procure linkorder from mulle-sde. Old version ?")
+   endif()
+   message( STATUS "MULLE_SDE_LINKER_FLAGS=\"${MULLE_SDE_LINKER_FLAGS}\"")
+else()
+   message( STATUS "Not a mulle-sde build (\"${DEPENDENCY_DIR}\" does not exist)")
+endif()
+
+
+#
+# Platform specific definitions
+#
+
+if( APPLE)
+   # # CMAKE_OSX_SYSROOT must be set for CMAKE_OSX_DEPLOYMENT_TARGET (cmake bug)
+   # if( NOT CMAKE_OSX_SYSROOT)
+   #    set( CMAKE_OSX_SYSROOT "/" CACHE STRING "SDK for OSX" FORCE)   # means current OS X
+   # endif()
+   #
+   # # baseline set to 10.6 for rpath
+   # if( NOT CMAKE_OSX_DEPLOYMENT_TARGET)
+   #   set(CMAKE_OSX_DEPLOYMENT_TARGET "10.6" CACHE STRING "Deployment target for OSX" FORCE)
+   # endif()
+
+   set( CMAKE_POSITION_INDEPENDENT_CODE FALSE)
+   set( CMAKE_INSTALL_RPATH "@rpath/../lib")
+
+   set( BEGIN_ALL_LOAD "-all_load")
+   set( END_ALL_LOAD)
+else()
+   set( CMAKE_POSITION_INDEPENDENT_CODE TRUE)
+
+   if( WIN32)
+   # windows
+   else()
+   # linux / gcc
+      set( BEGIN_ALL_LOAD "-Wl,--whole-archive")
+      set( END_ALL_LOAD "-Wl,--no-whole-archive")
+      set( CMAKE_INSTALL_RPATH "\$ORIGIN/../lib")
+   endif()
+endif()
+
+##
+## Produce CMakeSourcesAndHeaders.txt with:
+##   mulle-xcode-to-cmake -t 'Cube-iOS' -t 'Cube-macOS' sexport > CMakeSourcesAndHeaders.txt
+##
+
+include( CMakeSourcesAndHeaders.txt)
+
+# uncomment this for mulle-objc to search libraries first
+# set( CMAKE_FIND_FRAMEWORK "LAST")
+
+set( CUBE_I_OS_STATIC_DEPENDENCIES
+)
+
+if( NOT SKIP_FIND_FOUNDATION_LIBRARY)
+   find_library( FOUNDATION_LIBRARY Foundation)
+   message( STATUS "FOUNDATION_LIBRARY is ${FOUNDATION_LIBRARY}")
+endif()
+if( NOT SKIP_FIND_MOLTEN_VK_LIBRARY)
+   find_library( MOLTEN_VK_LIBRARY MoltenVK)
+   message( STATUS "MOLTEN_VK_LIBRARY is ${MOLTEN_VK_LIBRARY}")
+endif()
+
+set( CUBE_I_OS_DEPENDENCIES
+${FOUNDATION_LIBRARY}
+${MOLTEN_VK_LIBRARY}
+)
+
+# uncomment this for mulle-objc to search libraries first
+# set( CMAKE_FIND_FRAMEWORK "LAST")
+
+set( CUBE_MAC_OS_STATIC_DEPENDENCIES
+)
+
+if( NOT SKIP_FIND_FOUNDATION_LIBRARY)
+   find_library( FOUNDATION_LIBRARY Foundation)
+   message( STATUS "FOUNDATION_LIBRARY is ${FOUNDATION_LIBRARY}")
+endif()
+if( NOT SKIP_FIND_MOLTEN_VK_LIBRARY)
+   find_library( MOLTEN_VK_LIBRARY MoltenVK)
+   message( STATUS "MOLTEN_VK_LIBRARY is ${MOLTEN_VK_LIBRARY}")
+endif()
+
+set( CUBE_MAC_OS_DEPENDENCIES
+${FOUNDATION_LIBRARY}
+${MOLTEN_VK_LIBRARY}
+)
+
+add_library( Cube-iOS STATIC
+${CUBE_I_OS_SOURCES}
+${CUBE_I_OS_PUBLIC_HEADERS}
+${CUBE_I_OS_PROJECT_HEADERS}
+${CUBE_I_OS_PRIVATE_HEADERS}
+${CUBE_I_OS_RESOURCES}
+)
+
+install( TARGETS Cube-iOS DESTINATION "lib")
+install( FILES ${CUBE_I_OS_PUBLIC_HEADERS} DESTINATION "include/Cube-iOS")
+
+
+##
+## Cube-iOS_shared
+##
+
+add_library( Cube-iOS_shared SHARED
+${CUBE_I_OS_SOURCES}
+)
+
+set_target_properties( Cube-iOS_shared
+   PROPERTIES
+   OUTPUT_NAME Cube-iOS)
+)
+
+install( TARGETS Cube-iOS_shared DESTINATION "lib")
+
+add_library( Cube-macOS STATIC
+${CUBE_MAC_OS_SOURCES}
+${CUBE_MAC_OS_PUBLIC_HEADERS}
+${CUBE_MAC_OS_PROJECT_HEADERS}
+${CUBE_MAC_OS_PRIVATE_HEADERS}
+${CUBE_MAC_OS_RESOURCES}
+)
+
+install( TARGETS Cube-macOS DESTINATION "lib")
+install( FILES ${CUBE_MAC_OS_PUBLIC_HEADERS} DESTINATION "include/Cube-macOS")
+
+
+##
+## Cube-macOS_shared
+##
+
+add_library( Cube-macOS_shared SHARED
+${CUBE_MAC_OS_SOURCES}
+)
+
+set_target_properties( Cube-macOS_shared
+   PROPERTIES
+   OUTPUT_NAME Cube-macOS)
+)
+
+install( TARGETS Cube-macOS_shared DESTINATION "lib")
diff --git a/Demos/LunarG-VulkanSamples/Cube/CMakeSourcesAndHeaders.txt b/Demos/LunarG-VulkanSamples/Cube/CMakeSourcesAndHeaders.txt
new file mode 100644
index 0000000..ce9fea5
--- /dev/null
+++ b/Demos/LunarG-VulkanSamples/Cube/CMakeSourcesAndHeaders.txt
@@ -0,0 +1,46 @@
+# Generated on 2019-11-10 1:31:50 by version 0.9.0 of mulle-xcode-to-cmake
+# Command line:
+#    mulle-xcode-to-cmake -2 -d sexport Cube.xcodeproj
+
+
+
+##
+## Cube-iOS Files
+##
+
+set( CUBE_I_OS_GLOBAL_RESOURCES
+iOS/Resources/Default-568h@2x.png
+"iOS/Resources/Default~ipad.png"
+iOS/Resources/Icon.png
+iOS/Resources/Main.storyboard
+)
+
+set( CUBE_I_OS_RESOURCES
+   ${CUBE_I_OS_GLOBAL_RESOURCES}
+)
+
+set( CUBE_I_OS_SOURCES
+iOS/AppDelegate.m
+iOS/DemoViewController.m
+iOS/main.m
+)
+
+
+##
+## Cube-macOS Files
+##
+
+set( CUBE_MAC_OS_GLOBAL_RESOURCES
+macOS/Resources/Main.storyboard
+macOS/Resources/macOS.xcassets
+)
+
+set( CUBE_MAC_OS_RESOURCES
+   ${CUBE_MAC_OS_GLOBAL_RESOURCES}
+)
+
+set( CUBE_MAC_OS_SOURCES
+macOS/AppDelegate.m
+macOS/DemoViewController.m
+macOS/main.m
+)
diff --git a/Demos/LunarG-VulkanSamples/Hologram/CMakeLists.txt b/Demos/LunarG-VulkanSamples/Hologram/CMakeLists.txt
new file mode 100644
index 0000000..5450aa9
--- /dev/null
+++ b/Demos/LunarG-VulkanSamples/Hologram/CMakeLists.txt
@@ -0,0 +1,195 @@
+# Generated on 2019-11-10 1:31:51 by version 0.9.0 of mulle-xcode-to-cmake
+# Command line:
+#    mulle-xcode-to-cmake -2 -d export Hologram.xcodeproj
+
+
+cmake_minimum_required (VERSION 3.4)
+project( Hologram C)
+
+# ###
+# Build for mulle-objc (https://mulle-objc.github.io/):
+#
+#    mulle-sde init -m foundation/objc-porter executable
+#    mulle-sde craft
+#
+# [mulle-clang >= 8.0.0.0 and mulle-objc >= 0.15 required]
+#
+
+if( NOT DEPENDENCY_DIR)
+   set( DEPENDENCY_DIR "$ENV{DEPENDENCY_DIR}")
+endif()
+if( NOT DEPENDENCY_DIR)
+   set( DEPENDENCY_DIR "${PROJECT_SOURCE_DIR}/dependency")
+endif()
+if( EXISTS "${DEPENDENCY_DIR}")
+   if( NOT ADDICTION_DIR)
+      get_filename_component( ADDICTION_DIR "${DEPENDENCY_DIR}" DIRECTORY)
+      set( ADDICTION_DIR "${ADDICTION_DIR}/addiction")
+   endif()
+   set( CMAKE_FIND_FRAMEWORK "LAST")
+   include_directories( BEFORE SYSTEM
+      ${DEPENDENCY_DIR}/include
+      ${ADDICTION_DIR}/include
+   )
+   set( CMAKE_FRAMEWORK_PATH
+      ${DEPENDENCY_DIR}/Frameworks
+      ${ADDICTION_DIR}/Frameworks
+      ${CMAKE_FRAMEWORK_PATH}
+   )
+   set( CMAKE_LIBRARY_PATH
+      ${DEPENDENCY_DIR}/lib
+      ${ADDICTION_DIR}/lib
+      ${CMAKE_LIBRARY_PATH}
+   )
+   set( SKIP_FIND_FOUNDATION_LIBRARY ON)
+   execute_process( COMMAND mulle-sde stash-dir
+                    OUTPUT_VARIABLE MULLE_SOURCETREE_STASH_DIR)
+   string( STRIP "${MULLE_SOURCETREE_STASH_DIR}" MULLE_SOURCETREE_STASH_DIR)
+   execute_process( COMMAND mulle-sde linkorder --stash-dir "${MULLE_SOURCETREE_STASH_DIR}" --startup --simplify --output-format cmake
+                    WORKING_DIRECTORY "${PROJECT_SOURCE_DIR}"
+                    OUTPUT_VARIABLE MULLE_SDE_LINKER_FLAGS
+                    RESULT_VARIABLE RVAL)
+   if( NOT ${RVAL} EQUAL 0)
+      message( FATAL_ERROR "Failed to procure linkorder from mulle-sde. Old version ?")
+   endif()
+   message( STATUS "MULLE_SDE_LINKER_FLAGS=\"${MULLE_SDE_LINKER_FLAGS}\"")
+else()
+   message( STATUS "Not a mulle-sde build (\"${DEPENDENCY_DIR}\" does not exist)")
+endif()
+
+
+#
+# Platform specific definitions
+#
+
+if( APPLE)
+   # # CMAKE_OSX_SYSROOT must be set for CMAKE_OSX_DEPLOYMENT_TARGET (cmake bug)
+   # if( NOT CMAKE_OSX_SYSROOT)
+   #    set( CMAKE_OSX_SYSROOT "/" CACHE STRING "SDK for OSX" FORCE)   # means current OS X
+   # endif()
+   #
+   # # baseline set to 10.6 for rpath
+   # if( NOT CMAKE_OSX_DEPLOYMENT_TARGET)
+   #   set(CMAKE_OSX_DEPLOYMENT_TARGET "10.6" CACHE STRING "Deployment target for OSX" FORCE)
+   # endif()
+
+   set( CMAKE_POSITION_INDEPENDENT_CODE FALSE)
+   set( CMAKE_INSTALL_RPATH "@rpath/../lib")
+
+   set( BEGIN_ALL_LOAD "-all_load")
+   set( END_ALL_LOAD)
+else()
+   set( CMAKE_POSITION_INDEPENDENT_CODE TRUE)
+
+   if( WIN32)
+   # windows
+   else()
+   # linux / gcc
+      set( BEGIN_ALL_LOAD "-Wl,--whole-archive")
+      set( END_ALL_LOAD "-Wl,--no-whole-archive")
+      set( CMAKE_INSTALL_RPATH "\$ORIGIN/../lib")
+   endif()
+endif()
+
+##
+## Produce CMakeSourcesAndHeaders.txt with:
+##   mulle-xcode-to-cmake -t 'Hologram-iOS' -t 'Hologram-macOS' sexport > CMakeSourcesAndHeaders.txt
+##
+
+include( CMakeSourcesAndHeaders.txt)
+
+# uncomment this for mulle-objc to search libraries first
+# set( CMAKE_FIND_FRAMEWORK "LAST")
+
+if( NOT SKIP_FIND_MOLTEN_VK_LIBRARY)
+   find_library( MOLTEN_VK_LIBRARY MoltenVK)
+   message( STATUS "MOLTEN_VK_LIBRARY is ${MOLTEN_VK_LIBRARY}")
+endif()
+
+set( HOLOGRAM_I_OS_STATIC_DEPENDENCIES
+${MOLTEN_VK_LIBRARY}
+)
+
+if( NOT SKIP_FIND_FOUNDATION_LIBRARY)
+   find_library( FOUNDATION_LIBRARY Foundation)
+   message( STATUS "FOUNDATION_LIBRARY is ${FOUNDATION_LIBRARY}")
+endif()
+
+set( HOLOGRAM_I_OS_DEPENDENCIES
+${FOUNDATION_LIBRARY}
+)
+
+# uncomment this for mulle-objc to search libraries first
+# set( CMAKE_FIND_FRAMEWORK "LAST")
+
+if( NOT SKIP_FIND_MOLTEN_VK_LIBRARY)
+   find_library( MOLTEN_VK_LIBRARY MoltenVK)
+   message( STATUS "MOLTEN_VK_LIBRARY is ${MOLTEN_VK_LIBRARY}")
+endif()
+
+set( HOLOGRAM_MAC_OS_STATIC_DEPENDENCIES
+${MOLTEN_VK_LIBRARY}
+)
+
+if( NOT SKIP_FIND_FOUNDATION_LIBRARY)
+   find_library( FOUNDATION_LIBRARY Foundation)
+   message( STATUS "FOUNDATION_LIBRARY is ${FOUNDATION_LIBRARY}")
+endif()
+
+set( HOLOGRAM_MAC_OS_DEPENDENCIES
+${FOUNDATION_LIBRARY}
+)
+
+add_library( Hologram-iOS STATIC
+${HOLOGRAM_I_OS_SOURCES}
+${HOLOGRAM_I_OS_PUBLIC_HEADERS}
+${HOLOGRAM_I_OS_PROJECT_HEADERS}
+${HOLOGRAM_I_OS_PRIVATE_HEADERS}
+${HOLOGRAM_I_OS_RESOURCES}
+)
+
+install( TARGETS Hologram-iOS DESTINATION "lib")
+install( FILES ${HOLOGRAM_I_OS_PUBLIC_HEADERS} DESTINATION "include/Hologram-iOS")
+
+
+##
+## Hologram-iOS_shared
+##
+
+add_library( Hologram-iOS_shared SHARED
+${HOLOGRAM_I_OS_SOURCES}
+)
+
+set_target_properties( Hologram-iOS_shared
+   PROPERTIES
+   OUTPUT_NAME Hologram-iOS)
+)
+
+install( TARGETS Hologram-iOS_shared DESTINATION "lib")
+
+add_library( Hologram-macOS STATIC
+${HOLOGRAM_MAC_OS_SOURCES}
+${HOLOGRAM_MAC_OS_PUBLIC_HEADERS}
+${HOLOGRAM_MAC_OS_PROJECT_HEADERS}
+${HOLOGRAM_MAC_OS_PRIVATE_HEADERS}
+${HOLOGRAM_MAC_OS_RESOURCES}
+)
+
+install( TARGETS Hologram-macOS DESTINATION "lib")
+install( FILES ${HOLOGRAM_MAC_OS_PUBLIC_HEADERS} DESTINATION "include/Hologram-macOS")
+
+
+##
+## Hologram-macOS_shared
+##
+
+add_library( Hologram-macOS_shared SHARED
+${HOLOGRAM_MAC_OS_SOURCES}
+)
+
+set_target_properties( Hologram-macOS_shared
+   PROPERTIES
+   OUTPUT_NAME Hologram-macOS)
+)
+
+install( TARGETS Hologram-macOS_shared DESTINATION "lib")
diff --git a/Demos/LunarG-VulkanSamples/Hologram/CMakeSourcesAndHeaders.txt b/Demos/LunarG-VulkanSamples/Hologram/CMakeSourcesAndHeaders.txt
new file mode 100644
index 0000000..9f7fd66
--- /dev/null
+++ b/Demos/LunarG-VulkanSamples/Hologram/CMakeSourcesAndHeaders.txt
@@ -0,0 +1,60 @@
+# Generated on 2019-11-10 1:31:51 by version 0.9.0 of mulle-xcode-to-cmake
+# Command line:
+#    mulle-xcode-to-cmake -2 -d sexport Hologram.xcodeproj
+
+
+
+##
+## Hologram-iOS Files
+##
+
+set( HOLOGRAM_I_OS_GLOBAL_RESOURCES
+iOS/Resources/Default-568h@2x.png
+"iOS/Resources/Default~ipad.png"
+iOS/Resources/Icon.png
+iOS/Resources/Main.storyboard
+)
+
+set( HOLOGRAM_I_OS_RESOURCES
+   ${HOLOGRAM_I_OS_GLOBAL_RESOURCES}
+)
+
+set( HOLOGRAM_I_OS_SOURCES
+../VulkanSamples/Sample-Programs/Hologram/HelpersDispatchTable.cpp
+../VulkanSamples/Sample-Programs/Hologram/Hologram.cpp
+../VulkanSamples/Sample-Programs/Hologram/Main.cpp
+../VulkanSamples/Sample-Programs/Hologram/Meshes.cpp
+../VulkanSamples/Sample-Programs/Hologram/Shell.cpp
+../VulkanSamples/Sample-Programs/Hologram/Simulation.cpp
+ShellMVK.cpp
+iOS/AppDelegate.m
+iOS/DemoViewController.mm
+iOS/main.m
+)
+
+
+##
+## Hologram-macOS Files
+##
+
+set( HOLOGRAM_MAC_OS_GLOBAL_RESOURCES
+macOS/Resources/Main.storyboard
+macOS/Resources/macOS.xcassets
+)
+
+set( HOLOGRAM_MAC_OS_RESOURCES
+   ${HOLOGRAM_MAC_OS_GLOBAL_RESOURCES}
+)
+
+set( HOLOGRAM_MAC_OS_SOURCES
+../VulkanSamples/Sample-Programs/Hologram/HelpersDispatchTable.cpp
+../VulkanSamples/Sample-Programs/Hologram/Hologram.cpp
+../VulkanSamples/Sample-Programs/Hologram/Main.cpp
+../VulkanSamples/Sample-Programs/Hologram/Meshes.cpp
+../VulkanSamples/Sample-Programs/Hologram/Shell.cpp
+../VulkanSamples/Sample-Programs/Hologram/Simulation.cpp
+ShellMVK.cpp
+macOS/AppDelegate.m
+macOS/DemoViewController.mm
+macOS/main.m
+)
diff --git a/ExternalDependencies.CMakeList.txt b/ExternalDependencies.CMakeList.txt
new file mode 100644
index 0000000..4d964c5
--- /dev/null
+++ b/ExternalDependencies.CMakeList.txt
@@ -0,0 +1,529 @@
+# Generated on 2019-11-10 1:31:50 by version 0.9.0 of mulle-xcode-to-cmake
+# Command line:
+#    mulle-xcode-to-cmake -2 -d export ExternalDependencies.xcodeproj
+
+
+cmake_minimum_required (VERSION 3.4)
+project( ExternalDependencies C)
+
+# ###
+# Build for mulle-objc (https://mulle-objc.github.io/):
+#
+#    mulle-sde init -m foundation/objc-porter executable
+#    mulle-sde craft
+#
+# [mulle-clang >= 8.0.0.0 and mulle-objc >= 0.15 required]
+#
+
+if( NOT DEPENDENCY_DIR)
+   set( DEPENDENCY_DIR "$ENV{DEPENDENCY_DIR}")
+endif()
+if( NOT DEPENDENCY_DIR)
+   set( DEPENDENCY_DIR "${PROJECT_SOURCE_DIR}/dependency")
+endif()
+if( EXISTS "${DEPENDENCY_DIR}")
+   if( NOT ADDICTION_DIR)
+      get_filename_component( ADDICTION_DIR "${DEPENDENCY_DIR}" DIRECTORY)
+      set( ADDICTION_DIR "${ADDICTION_DIR}/addiction")
+   endif()
+   set( CMAKE_FIND_FRAMEWORK "LAST")
+   include_directories( BEFORE SYSTEM
+      ${DEPENDENCY_DIR}/include
+      ${ADDICTION_DIR}/include
+   )
+   set( CMAKE_FRAMEWORK_PATH
+      ${DEPENDENCY_DIR}/Frameworks
+      ${ADDICTION_DIR}/Frameworks
+      ${CMAKE_FRAMEWORK_PATH}
+   )
+   set( CMAKE_LIBRARY_PATH
+      ${DEPENDENCY_DIR}/lib
+      ${ADDICTION_DIR}/lib
+      ${CMAKE_LIBRARY_PATH}
+   )
+   set( SKIP_FIND_FOUNDATION_LIBRARY ON)
+   execute_process( COMMAND mulle-sde stash-dir
+                    OUTPUT_VARIABLE MULLE_SOURCETREE_STASH_DIR)
+   string( STRIP "${MULLE_SOURCETREE_STASH_DIR}" MULLE_SOURCETREE_STASH_DIR)
+   execute_process( COMMAND mulle-sde linkorder --stash-dir "${MULLE_SOURCETREE_STASH_DIR}" --startup --simplify --output-format cmake
+                    WORKING_DIRECTORY "${PROJECT_SOURCE_DIR}"
+                    OUTPUT_VARIABLE MULLE_SDE_LINKER_FLAGS
+                    RESULT_VARIABLE RVAL)
+   if( NOT ${RVAL} EQUAL 0)
+      message( FATAL_ERROR "Failed to procure linkorder from mulle-sde. Old version ?")
+   endif()
+   message( STATUS "MULLE_SDE_LINKER_FLAGS=\"${MULLE_SDE_LINKER_FLAGS}\"")
+else()
+   message( STATUS "Not a mulle-sde build (\"${DEPENDENCY_DIR}\" does not exist)")
+endif()
+
+
+#
+# Platform specific definitions
+#
+
+if( APPLE)
+   # # CMAKE_OSX_SYSROOT must be set for CMAKE_OSX_DEPLOYMENT_TARGET (cmake bug)
+   # if( NOT CMAKE_OSX_SYSROOT)
+   #    set( CMAKE_OSX_SYSROOT "/" CACHE STRING "SDK for OSX" FORCE)   # means current OS X
+   # endif()
+   #
+   # # baseline set to 10.6 for rpath
+   # if( NOT CMAKE_OSX_DEPLOYMENT_TARGET)
+   #   set(CMAKE_OSX_DEPLOYMENT_TARGET "10.6" CACHE STRING "Deployment target for OSX" FORCE)
+   # endif()
+
+   set( CMAKE_POSITION_INDEPENDENT_CODE FALSE)
+   set( CMAKE_INSTALL_RPATH "@rpath/../lib")
+
+   set( BEGIN_ALL_LOAD "-all_load")
+   set( END_ALL_LOAD)
+else()
+   set( CMAKE_POSITION_INDEPENDENT_CODE TRUE)
+
+   if( WIN32)
+   # windows
+   else()
+   # linux / gcc
+      set( BEGIN_ALL_LOAD "-Wl,--whole-archive")
+      set( END_ALL_LOAD "-Wl,--no-whole-archive")
+      set( CMAKE_INSTALL_RPATH "\$ORIGIN/../lib")
+   endif()
+endif()
+
+##
+## Produce ExternalDependencies.CMakeSourcesAndHeaders.txt with:
+##   mulle-xcode-to-cmake -t 'ExternalDependencies' -t 'ExternalDependencies-iOS' -t 'ExternalDependencies-macOS' -t 'SPIRV-Cross-iOS' -t 'SPIRV-Cross-macOS' -t 'SPIRV-Tools-iOS' -t 'SPIRV-Tools-macOS' -t 'glslang-iOS' -t 'glslang-macOS' sexport > ExternalDependencies.CMakeSourcesAndHeaders.txt
+##
+
+include( ExternalDependencies.CMakeSourcesAndHeaders.txt)
+
+# uncomment this for mulle-objc to search libraries first
+# set( CMAKE_FIND_FRAMEWORK "LAST")
+
+# uncomment this for mulle-objc to search libraries first
+# set( CMAKE_FIND_FRAMEWORK "LAST")
+
+# uncomment this for mulle-objc to search libraries first
+# set( CMAKE_FIND_FRAMEWORK "LAST")
+
+# uncomment this for mulle-objc to search libraries first
+# set( CMAKE_FIND_FRAMEWORK "LAST")
+
+# uncomment this for mulle-objc to search libraries first
+# set( CMAKE_FIND_FRAMEWORK "LAST")
+
+# uncomment this for mulle-objc to search libraries first
+# set( CMAKE_FIND_FRAMEWORK "LAST")
+
+add_library( ExternalDependencies STATIC
+${EXTERNAL_DEPENDENCIES_SOURCES}
+${EXTERNAL_DEPENDENCIES_PUBLIC_HEADERS}
+${EXTERNAL_DEPENDENCIES_PROJECT_HEADERS}
+${EXTERNAL_DEPENDENCIES_PRIVATE_HEADERS}
+${EXTERNAL_DEPENDENCIES_RESOURCES}
+)
+
+target_include_directories( ExternalDependencies
+   PUBLIC
+External/SPIRV-Cross
+External/glslang/External/spirv-tools/source
+External/glslang/External/spirv-tools/source/opt
+External/glslang/External/spirv-tools/source/reduce
+External/glslang/External/spirv-tools/source/util
+External/glslang/External/spirv-tools/source/val
+External/glslang/OGLCompilersDLL
+External/glslang/SPIRV
+External/glslang/glslang/Include
+External/glslang/glslang/MachineIndependent
+External/glslang/glslang/MachineIndependent/preprocessor
+External/glslang/glslang/OSDependent
+External/glslang/glslang/Public
+)
+
+add_dependencies( ExternalDependencies ExternalDependencies-iOS)
+
+add_dependencies( ExternalDependencies ExternalDependencies-macOS)
+
+install( TARGETS ExternalDependencies DESTINATION "lib")
+install( FILES ${EXTERNAL_DEPENDENCIES_PUBLIC_HEADERS} DESTINATION "include/ExternalDependencies")
+
+
+##
+## ExternalDependencies_shared
+##
+
+add_library( ExternalDependencies_shared SHARED
+${EXTERNAL_DEPENDENCIES_SOURCES}
+)
+
+set_target_properties( ExternalDependencies_shared
+   PROPERTIES
+   OUTPUT_NAME ExternalDependencies)
+)
+
+install( TARGETS ExternalDependencies_shared DESTINATION "lib")
+
+add_library( ExternalDependencies-iOS STATIC
+${EXTERNAL_DEPENDENCIES_I_OS_SOURCES}
+${EXTERNAL_DEPENDENCIES_I_OS_PUBLIC_HEADERS}
+${EXTERNAL_DEPENDENCIES_I_OS_PROJECT_HEADERS}
+${EXTERNAL_DEPENDENCIES_I_OS_PRIVATE_HEADERS}
+${EXTERNAL_DEPENDENCIES_I_OS_RESOURCES}
+)
+
+target_include_directories( ExternalDependencies-iOS
+   PUBLIC
+External/SPIRV-Cross
+External/glslang/External/spirv-tools/source
+External/glslang/External/spirv-tools/source/opt
+External/glslang/External/spirv-tools/source/reduce
+External/glslang/External/spirv-tools/source/util
+External/glslang/External/spirv-tools/source/val
+External/glslang/OGLCompilersDLL
+External/glslang/SPIRV
+External/glslang/glslang/Include
+External/glslang/glslang/MachineIndependent
+External/glslang/glslang/MachineIndependent/preprocessor
+External/glslang/glslang/OSDependent
+External/glslang/glslang/Public
+)
+
+add_dependencies( ExternalDependencies-iOS SPIRV-Cross-iOS)
+
+add_dependencies( ExternalDependencies-iOS SPIRV-Tools-iOS)
+
+add_dependencies( ExternalDependencies-iOS glslang-iOS)
+
+install( TARGETS ExternalDependencies-iOS DESTINATION "lib")
+install( FILES ${EXTERNAL_DEPENDENCIES_I_OS_PUBLIC_HEADERS} DESTINATION "include/ExternalDependencies-iOS")
+
+
+##
+## ExternalDependencies-iOS_shared
+##
+
+add_library( ExternalDependencies-iOS_shared SHARED
+${EXTERNAL_DEPENDENCIES_I_OS_SOURCES}
+)
+
+set_target_properties( ExternalDependencies-iOS_shared
+   PROPERTIES
+   OUTPUT_NAME ExternalDependencies-iOS)
+)
+
+install( TARGETS ExternalDependencies-iOS_shared DESTINATION "lib")
+
+add_library( ExternalDependencies-macOS STATIC
+${EXTERNAL_DEPENDENCIES_MAC_OS_SOURCES}
+${EXTERNAL_DEPENDENCIES_MAC_OS_PUBLIC_HEADERS}
+${EXTERNAL_DEPENDENCIES_MAC_OS_PROJECT_HEADERS}
+${EXTERNAL_DEPENDENCIES_MAC_OS_PRIVATE_HEADERS}
+${EXTERNAL_DEPENDENCIES_MAC_OS_RESOURCES}
+)
+
+target_include_directories( ExternalDependencies-macOS
+   PUBLIC
+External/SPIRV-Cross
+External/glslang/External/spirv-tools/source
+External/glslang/External/spirv-tools/source/opt
+External/glslang/External/spirv-tools/source/reduce
+External/glslang/External/spirv-tools/source/util
+External/glslang/External/spirv-tools/source/val
+External/glslang/OGLCompilersDLL
+External/glslang/SPIRV
+External/glslang/glslang/Include
+External/glslang/glslang/MachineIndependent
+External/glslang/glslang/MachineIndependent/preprocessor
+External/glslang/glslang/OSDependent
+External/glslang/glslang/Public
+)
+
+add_dependencies( ExternalDependencies-macOS SPIRV-Cross-macOS)
+
+add_dependencies( ExternalDependencies-macOS SPIRV-Tools-macOS)
+
+add_dependencies( ExternalDependencies-macOS glslang-macOS)
+
+install( TARGETS ExternalDependencies-macOS DESTINATION "lib")
+install( FILES ${EXTERNAL_DEPENDENCIES_MAC_OS_PUBLIC_HEADERS} DESTINATION "include/ExternalDependencies-macOS")
+
+
+##
+## ExternalDependencies-macOS_shared
+##
+
+add_library( ExternalDependencies-macOS_shared SHARED
+${EXTERNAL_DEPENDENCIES_MAC_OS_SOURCES}
+)
+
+set_target_properties( ExternalDependencies-macOS_shared
+   PROPERTIES
+   OUTPUT_NAME ExternalDependencies-macOS)
+)
+
+install( TARGETS ExternalDependencies-macOS_shared DESTINATION "lib")
+
+add_library( SPIRV-Cross-iOS STATIC
+${SPIRV__CROSS_I_OS_SOURCES}
+${SPIRV__CROSS_I_OS_PUBLIC_HEADERS}
+${SPIRV__CROSS_I_OS_PROJECT_HEADERS}
+${SPIRV__CROSS_I_OS_PRIVATE_HEADERS}
+${SPIRV__CROSS_I_OS_RESOURCES}
+)
+
+target_include_directories( SPIRV-Cross-iOS
+   PUBLIC
+External/SPIRV-Cross
+External/glslang/External/spirv-tools/source
+External/glslang/External/spirv-tools/source/opt
+External/glslang/External/spirv-tools/source/reduce
+External/glslang/External/spirv-tools/source/util
+External/glslang/External/spirv-tools/source/val
+External/glslang/OGLCompilersDLL
+External/glslang/SPIRV
+External/glslang/glslang/Include
+External/glslang/glslang/MachineIndependent
+External/glslang/glslang/MachineIndependent/preprocessor
+External/glslang/glslang/OSDependent
+External/glslang/glslang/Public
+)
+
+install( TARGETS SPIRV-Cross-iOS DESTINATION "lib")
+install( FILES ${SPIRV__CROSS_I_OS_PUBLIC_HEADERS} DESTINATION "include/SPIRV-Cross-iOS")
+
+
+##
+## SPIRV-Cross-iOS_shared
+##
+
+add_library( SPIRV-Cross-iOS_shared SHARED
+${SPIRV__CROSS_I_OS_SOURCES}
+)
+
+set_target_properties( SPIRV-Cross-iOS_shared
+   PROPERTIES
+   OUTPUT_NAME SPIRV-Cross-iOS)
+)
+
+install( TARGETS SPIRV-Cross-iOS_shared DESTINATION "lib")
+
+add_library( SPIRV-Cross-macOS STATIC
+${SPIRV__CROSS_MAC_OS_SOURCES}
+${SPIRV__CROSS_MAC_OS_PUBLIC_HEADERS}
+${SPIRV__CROSS_MAC_OS_PROJECT_HEADERS}
+${SPIRV__CROSS_MAC_OS_PRIVATE_HEADERS}
+${SPIRV__CROSS_MAC_OS_RESOURCES}
+)
+
+target_include_directories( SPIRV-Cross-macOS
+   PUBLIC
+External/SPIRV-Cross
+External/glslang/External/spirv-tools/source
+External/glslang/External/spirv-tools/source/opt
+External/glslang/External/spirv-tools/source/reduce
+External/glslang/External/spirv-tools/source/util
+External/glslang/External/spirv-tools/source/val
+External/glslang/OGLCompilersDLL
+External/glslang/SPIRV
+External/glslang/glslang/Include
+External/glslang/glslang/MachineIndependent
+External/glslang/glslang/MachineIndependent/preprocessor
+External/glslang/glslang/OSDependent
+External/glslang/glslang/Public
+)
+
+install( TARGETS SPIRV-Cross-macOS DESTINATION "lib")
+install( FILES ${SPIRV__CROSS_MAC_OS_PUBLIC_HEADERS} DESTINATION "include/SPIRV-Cross-macOS")
+
+
+##
+## SPIRV-Cross-macOS_shared
+##
+
+add_library( SPIRV-Cross-macOS_shared SHARED
+${SPIRV__CROSS_MAC_OS_SOURCES}
+)
+
+set_target_properties( SPIRV-Cross-macOS_shared
+   PROPERTIES
+   OUTPUT_NAME SPIRV-Cross-macOS)
+)
+
+install( TARGETS SPIRV-Cross-macOS_shared DESTINATION "lib")
+
+add_library( SPIRV-Tools-iOS STATIC
+${SPIRV__TOOLS_I_OS_SOURCES}
+${SPIRV__TOOLS_I_OS_PUBLIC_HEADERS}
+${SPIRV__TOOLS_I_OS_PROJECT_HEADERS}
+${SPIRV__TOOLS_I_OS_PRIVATE_HEADERS}
+${SPIRV__TOOLS_I_OS_RESOURCES}
+)
+
+target_include_directories( SPIRV-Tools-iOS
+   PUBLIC
+External/SPIRV-Cross
+External/glslang/External/spirv-tools/source
+External/glslang/External/spirv-tools/source/opt
+External/glslang/External/spirv-tools/source/reduce
+External/glslang/External/spirv-tools/source/util
+External/glslang/External/spirv-tools/source/val
+External/glslang/OGLCompilersDLL
+External/glslang/SPIRV
+External/glslang/glslang/Include
+External/glslang/glslang/MachineIndependent
+External/glslang/glslang/MachineIndependent/preprocessor
+External/glslang/glslang/OSDependent
+External/glslang/glslang/Public
+)
+
+install( TARGETS SPIRV-Tools-iOS DESTINATION "lib")
+install( FILES ${SPIRV__TOOLS_I_OS_PUBLIC_HEADERS} DESTINATION "include/SPIRV-Tools-iOS")
+
+
+##
+## SPIRV-Tools-iOS_shared
+##
+
+add_library( SPIRV-Tools-iOS_shared SHARED
+${SPIRV__TOOLS_I_OS_SOURCES}
+)
+
+set_target_properties( SPIRV-Tools-iOS_shared
+   PROPERTIES
+   OUTPUT_NAME SPIRV-Tools-iOS)
+)
+
+install( TARGETS SPIRV-Tools-iOS_shared DESTINATION "lib")
+
+add_library( SPIRV-Tools-macOS STATIC
+${SPIRV__TOOLS_MAC_OS_SOURCES}
+${SPIRV__TOOLS_MAC_OS_PUBLIC_HEADERS}
+${SPIRV__TOOLS_MAC_OS_PROJECT_HEADERS}
+${SPIRV__TOOLS_MAC_OS_PRIVATE_HEADERS}
+${SPIRV__TOOLS_MAC_OS_RESOURCES}
+)
+
+target_include_directories( SPIRV-Tools-macOS
+   PUBLIC
+External/SPIRV-Cross
+External/glslang/External/spirv-tools/source
+External/glslang/External/spirv-tools/source/opt
+External/glslang/External/spirv-tools/source/reduce
+External/glslang/External/spirv-tools/source/util
+External/glslang/External/spirv-tools/source/val
+External/glslang/OGLCompilersDLL
+External/glslang/SPIRV
+External/glslang/glslang/Include
+External/glslang/glslang/MachineIndependent
+External/glslang/glslang/MachineIndependent/preprocessor
+External/glslang/glslang/OSDependent
+External/glslang/glslang/Public
+)
+
+install( TARGETS SPIRV-Tools-macOS DESTINATION "lib")
+install( FILES ${SPIRV__TOOLS_MAC_OS_PUBLIC_HEADERS} DESTINATION "include/SPIRV-Tools-macOS")
+
+
+##
+## SPIRV-Tools-macOS_shared
+##
+
+add_library( SPIRV-Tools-macOS_shared SHARED
+${SPIRV__TOOLS_MAC_OS_SOURCES}
+)
+
+set_target_properties( SPIRV-Tools-macOS_shared
+   PROPERTIES
+   OUTPUT_NAME SPIRV-Tools-macOS)
+)
+
+install( TARGETS SPIRV-Tools-macOS_shared DESTINATION "lib")
+
+add_library( glslang-iOS STATIC
+${GLSLANG_I_OS_SOURCES}
+${GLSLANG_I_OS_PUBLIC_HEADERS}
+${GLSLANG_I_OS_PROJECT_HEADERS}
+${GLSLANG_I_OS_PRIVATE_HEADERS}
+${GLSLANG_I_OS_RESOURCES}
+)
+
+target_include_directories( glslang-iOS
+   PUBLIC
+External/SPIRV-Cross
+External/glslang/External/spirv-tools/source
+External/glslang/External/spirv-tools/source/opt
+External/glslang/External/spirv-tools/source/reduce
+External/glslang/External/spirv-tools/source/util
+External/glslang/External/spirv-tools/source/val
+External/glslang/OGLCompilersDLL
+External/glslang/SPIRV
+External/glslang/glslang/Include
+External/glslang/glslang/MachineIndependent
+External/glslang/glslang/MachineIndependent/preprocessor
+External/glslang/glslang/OSDependent
+External/glslang/glslang/Public
+)
+
+install( TARGETS glslang-iOS DESTINATION "lib")
+install( FILES ${GLSLANG_I_OS_PUBLIC_HEADERS} DESTINATION "include/glslang-iOS")
+
+
+##
+## glslang-iOS_shared
+##
+
+add_library( glslang-iOS_shared SHARED
+${GLSLANG_I_OS_SOURCES}
+)
+
+set_target_properties( glslang-iOS_shared
+   PROPERTIES
+   OUTPUT_NAME glslang-iOS)
+)
+
+install( TARGETS glslang-iOS_shared DESTINATION "lib")
+
+add_library( glslang-macOS STATIC
+${GLSLANG_MAC_OS_SOURCES}
+${GLSLANG_MAC_OS_PUBLIC_HEADERS}
+${GLSLANG_MAC_OS_PROJECT_HEADERS}
+${GLSLANG_MAC_OS_PRIVATE_HEADERS}
+${GLSLANG_MAC_OS_RESOURCES}
+)
+
+target_include_directories( glslang-macOS
+   PUBLIC
+External/SPIRV-Cross
+External/glslang/External/spirv-tools/source
+External/glslang/External/spirv-tools/source/opt
+External/glslang/External/spirv-tools/source/reduce
+External/glslang/External/spirv-tools/source/util
+External/glslang/External/spirv-tools/source/val
+External/glslang/OGLCompilersDLL
+External/glslang/SPIRV
+External/glslang/glslang/Include
+External/glslang/glslang/MachineIndependent
+External/glslang/glslang/MachineIndependent/preprocessor
+External/glslang/glslang/OSDependent
+External/glslang/glslang/Public
+)
+
+install( TARGETS glslang-macOS DESTINATION "lib")
+install( FILES ${GLSLANG_MAC_OS_PUBLIC_HEADERS} DESTINATION "include/glslang-macOS")
+
+
+##
+## glslang-macOS_shared
+##
+
+add_library( glslang-macOS_shared SHARED
+${GLSLANG_MAC_OS_SOURCES}
+)
+
+set_target_properties( glslang-macOS_shared
+   PROPERTIES
+   OUTPUT_NAME glslang-macOS)
+)
+
+install( TARGETS glslang-macOS_shared DESTINATION "lib")
diff --git a/ExternalDependencies.CMakeSourcesAndHeaders.txt b/ExternalDependencies.CMakeSourcesAndHeaders.txt
new file mode 100644
index 0000000..84ab91e
--- /dev/null
+++ b/ExternalDependencies.CMakeSourcesAndHeaders.txt
@@ -0,0 +1,1157 @@
+# Generated on 2019-11-10 1:31:50 by version 0.9.0 of mulle-xcode-to-cmake
+# Command line:
+#    mulle-xcode-to-cmake -2 -d sexport ExternalDependencies.xcodeproj
+
+
+
+##
+## ExternalDependencies Files
+##
+
+
+##
+## ExternalDependencies-iOS Files
+##
+
+
+##
+## ExternalDependencies-macOS Files
+##
+
+
+##
+## SPIRV-Cross-iOS Files
+##
+
+set( SPIRV__CROSS_I_OS_INCLUDE_DIRS
+External/SPIRV-Cross
+)
+
+set( SPIRV__CROSS_I_OS_PUBLIC_HEADERS
+)
+
+set( SPIRV__CROSS_I_OS_PROJECT_HEADERS
+External/SPIRV-Cross/spirv_cfg.hpp
+External/SPIRV-Cross/spirv_common.hpp
+External/SPIRV-Cross/spirv_cross.hpp
+External/SPIRV-Cross/spirv_cross_parsed_ir.hpp
+External/SPIRV-Cross/spirv_glsl.hpp
+External/SPIRV-Cross/spirv_msl.hpp
+External/SPIRV-Cross/spirv_parser.hpp
+External/SPIRV-Cross/spirv_reflect.hpp
+)
+
+set( SPIRV__CROSS_I_OS_PRIVATE_HEADERS
+)
+
+set( SPIRV__CROSS_I_OS_SOURCES
+External/SPIRV-Cross/spirv_cfg.cpp
+External/SPIRV-Cross/spirv_cross.cpp
+External/SPIRV-Cross/spirv_cross_parsed_ir.cpp
+External/SPIRV-Cross/spirv_glsl.cpp
+External/SPIRV-Cross/spirv_msl.cpp
+External/SPIRV-Cross/spirv_parser.cpp
+External/SPIRV-Cross/spirv_reflect.cpp
+)
+
+
+##
+## SPIRV-Cross-macOS Files
+##
+
+set( SPIRV__CROSS_MAC_OS_INCLUDE_DIRS
+External/SPIRV-Cross
+)
+
+set( SPIRV__CROSS_MAC_OS_PUBLIC_HEADERS
+)
+
+set( SPIRV__CROSS_MAC_OS_PROJECT_HEADERS
+External/SPIRV-Cross/spirv_cfg.hpp
+External/SPIRV-Cross/spirv_common.hpp
+External/SPIRV-Cross/spirv_cross.hpp
+External/SPIRV-Cross/spirv_cross_parsed_ir.hpp
+External/SPIRV-Cross/spirv_glsl.hpp
+External/SPIRV-Cross/spirv_msl.hpp
+External/SPIRV-Cross/spirv_parser.hpp
+External/SPIRV-Cross/spirv_reflect.hpp
+)
+
+set( SPIRV__CROSS_MAC_OS_PRIVATE_HEADERS
+)
+
+set( SPIRV__CROSS_MAC_OS_SOURCES
+External/SPIRV-Cross/spirv_cfg.cpp
+External/SPIRV-Cross/spirv_cross.cpp
+External/SPIRV-Cross/spirv_cross_parsed_ir.cpp
+External/SPIRV-Cross/spirv_glsl.cpp
+External/SPIRV-Cross/spirv_msl.cpp
+External/SPIRV-Cross/spirv_parser.cpp
+External/SPIRV-Cross/spirv_reflect.cpp
+)
+
+
+##
+## SPIRV-Tools-iOS Files
+##
+
+set( SPIRV__TOOLS_I_OS_INCLUDE_DIRS
+External/SPIRV-Cross
+External/glslang/External/spirv-tools/source
+External/glslang/External/spirv-tools/source/opt
+External/glslang/External/spirv-tools/source/reduce
+External/glslang/External/spirv-tools/source/util
+External/glslang/External/spirv-tools/source/val
+)
+
+set( SPIRV__TOOLS_I_OS_PUBLIC_HEADERS
+)
+
+set( SPIRV__TOOLS_I_OS_PROJECT_HEADERS
+External/glslang/External/spirv-tools/source/assembly_grammar.h
+External/glslang/External/spirv-tools/source/binary.h
+External/glslang/External/spirv-tools/source/cfa.h
+External/glslang/External/spirv-tools/source/diagnostic.h
+External/glslang/External/spirv-tools/source/disassemble.h
+External/glslang/External/spirv-tools/source/enum_set.h
+External/glslang/External/spirv-tools/source/enum_string_mapping.h
+External/glslang/External/spirv-tools/source/ext_inst.h
+External/glslang/External/spirv-tools/source/extensions.h
+External/glslang/External/spirv-tools/source/instruction.h
+External/glslang/External/spirv-tools/source/latest_version_glsl_std_450_header.h
+External/glslang/External/spirv-tools/source/latest_version_opencl_std_header.h
+External/glslang/External/spirv-tools/source/latest_version_spirv_header.h
+External/glslang/External/spirv-tools/source/macro.h
+External/glslang/External/spirv-tools/source/name_mapper.h
+External/glslang/External/spirv-tools/source/opcode.h
+External/glslang/External/spirv-tools/source/operand.h
+External/glslang/External/spirv-tools/source/opt/aggressive_dead_code_elim_pass.h
+External/glslang/External/spirv-tools/source/opt/amd_ext_to_khr.h
+External/glslang/External/spirv-tools/source/opt/basic_block.h
+External/glslang/External/spirv-tools/source/opt/block_merge_pass.h
+External/glslang/External/spirv-tools/source/opt/block_merge_util.h
+External/glslang/External/spirv-tools/source/opt/build_module.h
+External/glslang/External/spirv-tools/source/opt/ccp_pass.h
+External/glslang/External/spirv-tools/source/opt/cfg.h
+External/glslang/External/spirv-tools/source/opt/cfg_cleanup_pass.h
+External/glslang/External/spirv-tools/source/opt/code_sink.h
+External/glslang/External/spirv-tools/source/opt/combine_access_chains.h
+External/glslang/External/spirv-tools/source/opt/compact_ids_pass.h
+External/glslang/External/spirv-tools/source/opt/composite.h
+External/glslang/External/spirv-tools/source/opt/const_folding_rules.h
+External/glslang/External/spirv-tools/source/opt/constants.h
+External/glslang/External/spirv-tools/source/opt/convert_to_half_pass.h
+External/glslang/External/spirv-tools/source/opt/copy_prop_arrays.h
+External/glslang/External/spirv-tools/source/opt/dead_branch_elim_pass.h
+External/glslang/External/spirv-tools/source/opt/dead_insert_elim_pass.h
+External/glslang/External/spirv-tools/source/opt/dead_variable_elimination.h
+External/glslang/External/spirv-tools/source/opt/decompose_initialized_variables_pass.h
+External/glslang/External/spirv-tools/source/opt/decoration_manager.h
+External/glslang/External/spirv-tools/source/opt/def_use_manager.h
+External/glslang/External/spirv-tools/source/opt/desc_sroa.h
+External/glslang/External/spirv-tools/source/opt/dominator_analysis.h
+External/glslang/External/spirv-tools/source/opt/dominator_tree.h
+External/glslang/External/spirv-tools/source/opt/eliminate_dead_constant_pass.h
+External/glslang/External/spirv-tools/source/opt/eliminate_dead_functions_pass.h
+External/glslang/External/spirv-tools/source/opt/eliminate_dead_functions_util.h
+External/glslang/External/spirv-tools/source/opt/eliminate_dead_members_pass.h
+External/glslang/External/spirv-tools/source/opt/feature_manager.h
+External/glslang/External/spirv-tools/source/opt/fix_storage_class.h
+External/glslang/External/spirv-tools/source/opt/flatten_decoration_pass.h
+External/glslang/External/spirv-tools/source/opt/fold.h
+External/glslang/External/spirv-tools/source/opt/fold_spec_constant_op_and_composite_pass.h
+External/glslang/External/spirv-tools/source/opt/folding_rules.h
+External/glslang/External/spirv-tools/source/opt/freeze_spec_constant_value_pass.h
+External/glslang/External/spirv-tools/source/opt/function.h
+External/glslang/External/spirv-tools/source/opt/generate_webgpu_initializers_pass.h
+External/glslang/External/spirv-tools/source/opt/graphics_robust_access_pass.h
+External/glslang/External/spirv-tools/source/opt/if_conversion.h
+External/glslang/External/spirv-tools/source/opt/inline_exhaustive_pass.h
+External/glslang/External/spirv-tools/source/opt/inline_opaque_pass.h
+External/glslang/External/spirv-tools/source/opt/inline_pass.h
+External/glslang/External/spirv-tools/source/opt/inst_bindless_check_pass.h
+External/glslang/External/spirv-tools/source/opt/inst_buff_addr_check_pass.h
+External/glslang/External/spirv-tools/source/opt/instruction.h
+External/glslang/External/spirv-tools/source/opt/instruction_list.h
+External/glslang/External/spirv-tools/source/opt/instrument_pass.h
+External/glslang/External/spirv-tools/source/opt/ir_builder.h
+External/glslang/External/spirv-tools/source/opt/ir_context.h
+External/glslang/External/spirv-tools/source/opt/ir_loader.h
+External/glslang/External/spirv-tools/source/opt/iterator.h
+External/glslang/External/spirv-tools/source/opt/legalize_vector_shuffle_pass.h
+External/glslang/External/spirv-tools/source/opt/licm_pass.h
+External/glslang/External/spirv-tools/source/opt/local_access_chain_convert_pass.h
+External/glslang/External/spirv-tools/source/opt/local_redundancy_elimination.h
+External/glslang/External/spirv-tools/source/opt/local_single_block_elim_pass.h
+External/glslang/External/spirv-tools/source/opt/local_single_store_elim_pass.h
+External/glslang/External/spirv-tools/source/opt/log.h
+External/glslang/External/spirv-tools/source/opt/loop_dependence.h
+External/glslang/External/spirv-tools/source/opt/loop_descriptor.h
+External/glslang/External/spirv-tools/source/opt/loop_fission.h
+External/glslang/External/spirv-tools/source/opt/loop_fusion.h
+External/glslang/External/spirv-tools/source/opt/loop_fusion_pass.h
+External/glslang/External/spirv-tools/source/opt/loop_peeling.h
+External/glslang/External/spirv-tools/source/opt/loop_unroller.h
+External/glslang/External/spirv-tools/source/opt/loop_unswitch_pass.h
+External/glslang/External/spirv-tools/source/opt/loop_utils.h
+External/glslang/External/spirv-tools/source/opt/mem_pass.h
+External/glslang/External/spirv-tools/source/opt/merge_return_pass.h
+External/glslang/External/spirv-tools/source/opt/module.h
+External/glslang/External/spirv-tools/source/opt/null_pass.h
+External/glslang/External/spirv-tools/source/opt/pass.h
+External/glslang/External/spirv-tools/source/opt/pass_manager.h
+External/glslang/External/spirv-tools/source/opt/passes.h
+External/glslang/External/spirv-tools/source/opt/pch_source_opt.h
+External/glslang/External/spirv-tools/source/opt/private_to_local_pass.h
+External/glslang/External/spirv-tools/source/opt/process_lines_pass.h
+External/glslang/External/spirv-tools/source/opt/propagator.h
+External/glslang/External/spirv-tools/source/opt/reduce_load_size.h
+External/glslang/External/spirv-tools/source/opt/redundancy_elimination.h
+External/glslang/External/spirv-tools/source/opt/reflect.h
+External/glslang/External/spirv-tools/source/opt/register_pressure.h
+External/glslang/External/spirv-tools/source/opt/relax_float_ops_pass.h
+External/glslang/External/spirv-tools/source/opt/remove_duplicates_pass.h
+External/glslang/External/spirv-tools/source/opt/replace_invalid_opc.h
+External/glslang/External/spirv-tools/source/opt/scalar_analysis.h
+External/glslang/External/spirv-tools/source/opt/scalar_analysis_nodes.h
+External/glslang/External/spirv-tools/source/opt/scalar_replacement_pass.h
+External/glslang/External/spirv-tools/source/opt/set_spec_constant_default_value_pass.h
+External/glslang/External/spirv-tools/source/opt/simplification_pass.h
+External/glslang/External/spirv-tools/source/opt/split_invalid_unreachable_pass.h
+External/glslang/External/spirv-tools/source/opt/ssa_rewrite_pass.h
+External/glslang/External/spirv-tools/source/opt/strength_reduction_pass.h
+External/glslang/External/spirv-tools/source/opt/strip_atomic_counter_memory_pass.h
+External/glslang/External/spirv-tools/source/opt/strip_debug_info_pass.h
+External/glslang/External/spirv-tools/source/opt/strip_reflect_info_pass.h
+External/glslang/External/spirv-tools/source/opt/struct_cfg_analysis.h
+External/glslang/External/spirv-tools/source/opt/tree_iterator.h
+External/glslang/External/spirv-tools/source/opt/type_manager.h
+External/glslang/External/spirv-tools/source/opt/types.h
+External/glslang/External/spirv-tools/source/opt/unify_const_pass.h
+External/glslang/External/spirv-tools/source/opt/upgrade_memory_model.h
+External/glslang/External/spirv-tools/source/opt/value_number_table.h
+External/glslang/External/spirv-tools/source/opt/vector_dce.h
+External/glslang/External/spirv-tools/source/opt/workaround1209.h
+External/glslang/External/spirv-tools/source/opt/wrap_opkill.h
+External/glslang/External/spirv-tools/source/parsed_operand.h
+External/glslang/External/spirv-tools/source/pch_source.h
+External/glslang/External/spirv-tools/source/print.h
+External/glslang/External/spirv-tools/source/reduce/change_operand_reduction_opportunity.h
+External/glslang/External/spirv-tools/source/reduce/change_operand_to_undef_reduction_opportunity.h
+External/glslang/External/spirv-tools/source/reduce/conditional_branch_to_simple_conditional_branch_opportunity_finder.h
+External/glslang/External/spirv-tools/source/reduce/conditional_branch_to_simple_conditional_branch_reduction_opportunity.h
+External/glslang/External/spirv-tools/source/reduce/merge_blocks_reduction_opportunity.h
+External/glslang/External/spirv-tools/source/reduce/merge_blocks_reduction_opportunity_finder.h
+External/glslang/External/spirv-tools/source/reduce/operand_to_const_reduction_opportunity_finder.h
+External/glslang/External/spirv-tools/source/reduce/operand_to_dominating_id_reduction_opportunity_finder.h
+External/glslang/External/spirv-tools/source/reduce/operand_to_undef_reduction_opportunity_finder.h
+External/glslang/External/spirv-tools/source/reduce/pch_source_reduce.h
+External/glslang/External/spirv-tools/source/reduce/reducer.h
+External/glslang/External/spirv-tools/source/reduce/reduction_opportunity.h
+External/glslang/External/spirv-tools/source/reduce/reduction_opportunity_finder.h
+External/glslang/External/spirv-tools/source/reduce/reduction_pass.h
+External/glslang/External/spirv-tools/source/reduce/reduction_util.h
+External/glslang/External/spirv-tools/source/reduce/remove_block_reduction_opportunity.h
+External/glslang/External/spirv-tools/source/reduce/remove_block_reduction_opportunity_finder.h
+External/glslang/External/spirv-tools/source/reduce/remove_function_reduction_opportunity.h
+External/glslang/External/spirv-tools/source/reduce/remove_function_reduction_opportunity_finder.h
+External/glslang/External/spirv-tools/source/reduce/remove_instruction_reduction_opportunity.h
+External/glslang/External/spirv-tools/source/reduce/remove_selection_reduction_opportunity.h
+External/glslang/External/spirv-tools/source/reduce/remove_selection_reduction_opportunity_finder.h
+External/glslang/External/spirv-tools/source/reduce/remove_unreferenced_instruction_reduction_opportunity_finder.h
+External/glslang/External/spirv-tools/source/reduce/simple_conditional_branch_to_branch_opportunity_finder.h
+External/glslang/External/spirv-tools/source/reduce/simple_conditional_branch_to_branch_reduction_opportunity.h
+External/glslang/External/spirv-tools/source/reduce/structured_loop_to_selection_reduction_opportunity.h
+External/glslang/External/spirv-tools/source/reduce/structured_loop_to_selection_reduction_opportunity_finder.h
+External/glslang/External/spirv-tools/source/spirv_constant.h
+External/glslang/External/spirv-tools/source/spirv_definition.h
+External/glslang/External/spirv-tools/source/spirv_endian.h
+External/glslang/External/spirv-tools/source/spirv_fuzzer_options.h
+External/glslang/External/spirv-tools/source/spirv_optimizer_options.h
+External/glslang/External/spirv-tools/source/spirv_reducer_options.h
+External/glslang/External/spirv-tools/source/spirv_target_env.h
+External/glslang/External/spirv-tools/source/spirv_validator_options.h
+External/glslang/External/spirv-tools/source/table.h
+External/glslang/External/spirv-tools/source/text.h
+External/glslang/External/spirv-tools/source/text_handler.h
+External/glslang/External/spirv-tools/source/util/bit_vector.h
+External/glslang/External/spirv-tools/source/util/bitutils.h
+External/glslang/External/spirv-tools/source/util/hex_float.h
+External/glslang/External/spirv-tools/source/util/ilist.h
+External/glslang/External/spirv-tools/source/util/ilist_node.h
+External/glslang/External/spirv-tools/source/util/make_unique.h
+External/glslang/External/spirv-tools/source/util/parse_number.h
+External/glslang/External/spirv-tools/source/util/small_vector.h
+External/glslang/External/spirv-tools/source/util/string_utils.h
+External/glslang/External/spirv-tools/source/util/timer.h
+External/glslang/External/spirv-tools/source/val/basic_block.h
+External/glslang/External/spirv-tools/source/val/construct.h
+External/glslang/External/spirv-tools/source/val/decoration.h
+External/glslang/External/spirv-tools/source/val/function.h
+External/glslang/External/spirv-tools/source/val/instruction.h
+External/glslang/External/spirv-tools/source/val/validate.h
+External/glslang/External/spirv-tools/source/val/validate_memory_semantics.h
+External/glslang/External/spirv-tools/source/val/validate_scopes.h
+External/glslang/External/spirv-tools/source/val/validation_state.h
+)
+
+set( SPIRV__TOOLS_I_OS_PRIVATE_HEADERS
+)
+
+set( SPIRV__TOOLS_I_OS_SOURCES
+External/glslang/External/spirv-tools/source/assembly_grammar.cpp
+External/glslang/External/spirv-tools/source/binary.cpp
+External/glslang/External/spirv-tools/source/diagnostic.cpp
+External/glslang/External/spirv-tools/source/disassemble.cpp
+External/glslang/External/spirv-tools/source/enum_string_mapping.cpp
+External/glslang/External/spirv-tools/source/ext_inst.cpp
+External/glslang/External/spirv-tools/source/extensions.cpp
+External/glslang/External/spirv-tools/source/libspirv.cpp
+External/glslang/External/spirv-tools/source/link/linker.cpp
+External/glslang/External/spirv-tools/source/name_mapper.cpp
+External/glslang/External/spirv-tools/source/opcode.cpp
+External/glslang/External/spirv-tools/source/operand.cpp
+External/glslang/External/spirv-tools/source/opt/aggressive_dead_code_elim_pass.cpp
+External/glslang/External/spirv-tools/source/opt/amd_ext_to_khr.cpp
+External/glslang/External/spirv-tools/source/opt/basic_block.cpp
+External/glslang/External/spirv-tools/source/opt/block_merge_pass.cpp
+External/glslang/External/spirv-tools/source/opt/block_merge_util.cpp
+External/glslang/External/spirv-tools/source/opt/build_module.cpp
+External/glslang/External/spirv-tools/source/opt/ccp_pass.cpp
+External/glslang/External/spirv-tools/source/opt/cfg.cpp
+External/glslang/External/spirv-tools/source/opt/cfg_cleanup_pass.cpp
+External/glslang/External/spirv-tools/source/opt/code_sink.cpp
+External/glslang/External/spirv-tools/source/opt/combine_access_chains.cpp
+External/glslang/External/spirv-tools/source/opt/compact_ids_pass.cpp
+External/glslang/External/spirv-tools/source/opt/composite.cpp
+External/glslang/External/spirv-tools/source/opt/const_folding_rules.cpp
+External/glslang/External/spirv-tools/source/opt/constants.cpp
+External/glslang/External/spirv-tools/source/opt/convert_to_half_pass.cpp
+External/glslang/External/spirv-tools/source/opt/copy_prop_arrays.cpp
+External/glslang/External/spirv-tools/source/opt/dead_branch_elim_pass.cpp
+External/glslang/External/spirv-tools/source/opt/dead_insert_elim_pass.cpp
+External/glslang/External/spirv-tools/source/opt/dead_variable_elimination.cpp
+External/glslang/External/spirv-tools/source/opt/decompose_initialized_variables_pass.cpp
+External/glslang/External/spirv-tools/source/opt/decoration_manager.cpp
+External/glslang/External/spirv-tools/source/opt/def_use_manager.cpp
+External/glslang/External/spirv-tools/source/opt/desc_sroa.cpp
+External/glslang/External/spirv-tools/source/opt/dominator_analysis.cpp
+External/glslang/External/spirv-tools/source/opt/dominator_tree.cpp
+External/glslang/External/spirv-tools/source/opt/eliminate_dead_constant_pass.cpp
+External/glslang/External/spirv-tools/source/opt/eliminate_dead_functions_pass.cpp
+External/glslang/External/spirv-tools/source/opt/eliminate_dead_functions_util.cpp
+External/glslang/External/spirv-tools/source/opt/eliminate_dead_members_pass.cpp
+External/glslang/External/spirv-tools/source/opt/feature_manager.cpp
+External/glslang/External/spirv-tools/source/opt/fix_storage_class.cpp
+External/glslang/External/spirv-tools/source/opt/flatten_decoration_pass.cpp
+External/glslang/External/spirv-tools/source/opt/fold.cpp
+External/glslang/External/spirv-tools/source/opt/fold_spec_constant_op_and_composite_pass.cpp
+External/glslang/External/spirv-tools/source/opt/folding_rules.cpp
+External/glslang/External/spirv-tools/source/opt/freeze_spec_constant_value_pass.cpp
+External/glslang/External/spirv-tools/source/opt/function.cpp
+External/glslang/External/spirv-tools/source/opt/generate_webgpu_initializers_pass.cpp
+External/glslang/External/spirv-tools/source/opt/graphics_robust_access_pass.cpp
+External/glslang/External/spirv-tools/source/opt/if_conversion.cpp
+External/glslang/External/spirv-tools/source/opt/inline_exhaustive_pass.cpp
+External/glslang/External/spirv-tools/source/opt/inline_opaque_pass.cpp
+External/glslang/External/spirv-tools/source/opt/inline_pass.cpp
+External/glslang/External/spirv-tools/source/opt/inst_bindless_check_pass.cpp
+External/glslang/External/spirv-tools/source/opt/inst_buff_addr_check_pass.cpp
+External/glslang/External/spirv-tools/source/opt/instruction.cpp
+External/glslang/External/spirv-tools/source/opt/instruction_list.cpp
+External/glslang/External/spirv-tools/source/opt/instrument_pass.cpp
+External/glslang/External/spirv-tools/source/opt/ir_context.cpp
+External/glslang/External/spirv-tools/source/opt/ir_loader.cpp
+External/glslang/External/spirv-tools/source/opt/legalize_vector_shuffle_pass.cpp
+External/glslang/External/spirv-tools/source/opt/licm_pass.cpp
+External/glslang/External/spirv-tools/source/opt/local_access_chain_convert_pass.cpp
+External/glslang/External/spirv-tools/source/opt/local_redundancy_elimination.cpp
+External/glslang/External/spirv-tools/source/opt/local_single_block_elim_pass.cpp
+External/glslang/External/spirv-tools/source/opt/local_single_store_elim_pass.cpp
+External/glslang/External/spirv-tools/source/opt/loop_dependence.cpp
+External/glslang/External/spirv-tools/source/opt/loop_dependence_helpers.cpp
+External/glslang/External/spirv-tools/source/opt/loop_descriptor.cpp
+External/glslang/External/spirv-tools/source/opt/loop_fission.cpp
+External/glslang/External/spirv-tools/source/opt/loop_fusion.cpp
+External/glslang/External/spirv-tools/source/opt/loop_fusion_pass.cpp
+External/glslang/External/spirv-tools/source/opt/loop_peeling.cpp
+External/glslang/External/spirv-tools/source/opt/loop_unroller.cpp
+External/glslang/External/spirv-tools/source/opt/loop_unswitch_pass.cpp
+External/glslang/External/spirv-tools/source/opt/loop_utils.cpp
+External/glslang/External/spirv-tools/source/opt/mem_pass.cpp
+External/glslang/External/spirv-tools/source/opt/merge_return_pass.cpp
+External/glslang/External/spirv-tools/source/opt/module.cpp
+External/glslang/External/spirv-tools/source/opt/optimizer.cpp
+External/glslang/External/spirv-tools/source/opt/pass.cpp
+External/glslang/External/spirv-tools/source/opt/pass_manager.cpp
+External/glslang/External/spirv-tools/source/opt/pch_source_opt.cpp
+External/glslang/External/spirv-tools/source/opt/private_to_local_pass.cpp
+External/glslang/External/spirv-tools/source/opt/process_lines_pass.cpp
+External/glslang/External/spirv-tools/source/opt/propagator.cpp
+External/glslang/External/spirv-tools/source/opt/reduce_load_size.cpp
+External/glslang/External/spirv-tools/source/opt/redundancy_elimination.cpp
+External/glslang/External/spirv-tools/source/opt/register_pressure.cpp
+External/glslang/External/spirv-tools/source/opt/relax_float_ops_pass.cpp
+External/glslang/External/spirv-tools/source/opt/remove_duplicates_pass.cpp
+External/glslang/External/spirv-tools/source/opt/replace_invalid_opc.cpp
+External/glslang/External/spirv-tools/source/opt/scalar_analysis.cpp
+External/glslang/External/spirv-tools/source/opt/scalar_analysis_simplification.cpp
+External/glslang/External/spirv-tools/source/opt/scalar_replacement_pass.cpp
+External/glslang/External/spirv-tools/source/opt/set_spec_constant_default_value_pass.cpp
+External/glslang/External/spirv-tools/source/opt/simplification_pass.cpp
+External/glslang/External/spirv-tools/source/opt/split_invalid_unreachable_pass.cpp
+External/glslang/External/spirv-tools/source/opt/ssa_rewrite_pass.cpp
+External/glslang/External/spirv-tools/source/opt/strength_reduction_pass.cpp
+External/glslang/External/spirv-tools/source/opt/strip_atomic_counter_memory_pass.cpp
+External/glslang/External/spirv-tools/source/opt/strip_debug_info_pass.cpp
+External/glslang/External/spirv-tools/source/opt/strip_reflect_info_pass.cpp
+External/glslang/External/spirv-tools/source/opt/struct_cfg_analysis.cpp
+External/glslang/External/spirv-tools/source/opt/type_manager.cpp
+External/glslang/External/spirv-tools/source/opt/types.cpp
+External/glslang/External/spirv-tools/source/opt/unify_const_pass.cpp
+External/glslang/External/spirv-tools/source/opt/upgrade_memory_model.cpp
+External/glslang/External/spirv-tools/source/opt/value_number_table.cpp
+External/glslang/External/spirv-tools/source/opt/vector_dce.cpp
+External/glslang/External/spirv-tools/source/opt/workaround1209.cpp
+External/glslang/External/spirv-tools/source/opt/wrap_opkill.cpp
+External/glslang/External/spirv-tools/source/parsed_operand.cpp
+External/glslang/External/spirv-tools/source/pch_source.cpp
+External/glslang/External/spirv-tools/source/print.cpp
+External/glslang/External/spirv-tools/source/reduce/change_operand_reduction_opportunity.cpp
+External/glslang/External/spirv-tools/source/reduce/change_operand_to_undef_reduction_opportunity.cpp
+External/glslang/External/spirv-tools/source/reduce/conditional_branch_to_simple_conditional_branch_opportunity_finder.cpp
+External/glslang/External/spirv-tools/source/reduce/conditional_branch_to_simple_conditional_branch_reduction_opportunity.cpp
+External/glslang/External/spirv-tools/source/reduce/merge_blocks_reduction_opportunity.cpp
+External/glslang/External/spirv-tools/source/reduce/merge_blocks_reduction_opportunity_finder.cpp
+External/glslang/External/spirv-tools/source/reduce/operand_to_const_reduction_opportunity_finder.cpp
+External/glslang/External/spirv-tools/source/reduce/operand_to_dominating_id_reduction_opportunity_finder.cpp
+External/glslang/External/spirv-tools/source/reduce/operand_to_undef_reduction_opportunity_finder.cpp
+External/glslang/External/spirv-tools/source/reduce/pch_source_reduce.cpp
+External/glslang/External/spirv-tools/source/reduce/reducer.cpp
+External/glslang/External/spirv-tools/source/reduce/reduction_opportunity.cpp
+External/glslang/External/spirv-tools/source/reduce/reduction_pass.cpp
+External/glslang/External/spirv-tools/source/reduce/reduction_util.cpp
+External/glslang/External/spirv-tools/source/reduce/remove_block_reduction_opportunity.cpp
+External/glslang/External/spirv-tools/source/reduce/remove_block_reduction_opportunity_finder.cpp
+External/glslang/External/spirv-tools/source/reduce/remove_function_reduction_opportunity.cpp
+External/glslang/External/spirv-tools/source/reduce/remove_function_reduction_opportunity_finder.cpp
+External/glslang/External/spirv-tools/source/reduce/remove_instruction_reduction_opportunity.cpp
+External/glslang/External/spirv-tools/source/reduce/remove_selection_reduction_opportunity.cpp
+External/glslang/External/spirv-tools/source/reduce/remove_selection_reduction_opportunity_finder.cpp
+External/glslang/External/spirv-tools/source/reduce/remove_unreferenced_instruction_reduction_opportunity_finder.cpp
+External/glslang/External/spirv-tools/source/reduce/simple_conditional_branch_to_branch_opportunity_finder.cpp
+External/glslang/External/spirv-tools/source/reduce/simple_conditional_branch_to_branch_reduction_opportunity.cpp
+External/glslang/External/spirv-tools/source/reduce/structured_loop_to_selection_reduction_opportunity.cpp
+External/glslang/External/spirv-tools/source/reduce/structured_loop_to_selection_reduction_opportunity_finder.cpp
+External/glslang/External/spirv-tools/source/software_version.cpp
+External/glslang/External/spirv-tools/source/spirv_endian.cpp
+External/glslang/External/spirv-tools/source/spirv_fuzzer_options.cpp
+External/glslang/External/spirv-tools/source/spirv_optimizer_options.cpp
+External/glslang/External/spirv-tools/source/spirv_reducer_options.cpp
+External/glslang/External/spirv-tools/source/spirv_target_env.cpp
+External/glslang/External/spirv-tools/source/spirv_validator_options.cpp
+External/glslang/External/spirv-tools/source/table.cpp
+External/glslang/External/spirv-tools/source/text.cpp
+External/glslang/External/spirv-tools/source/text_handler.cpp
+External/glslang/External/spirv-tools/source/util/bit_vector.cpp
+External/glslang/External/spirv-tools/source/util/parse_number.cpp
+External/glslang/External/spirv-tools/source/util/string_utils.cpp
+External/glslang/External/spirv-tools/source/util/timer.cpp
+External/glslang/External/spirv-tools/source/val/basic_block.cpp
+External/glslang/External/spirv-tools/source/val/construct.cpp
+External/glslang/External/spirv-tools/source/val/function.cpp
+External/glslang/External/spirv-tools/source/val/instruction.cpp
+External/glslang/External/spirv-tools/source/val/validate.cpp
+External/glslang/External/spirv-tools/source/val/validate_adjacency.cpp
+External/glslang/External/spirv-tools/source/val/validate_annotation.cpp
+External/glslang/External/spirv-tools/source/val/validate_arithmetics.cpp
+External/glslang/External/spirv-tools/source/val/validate_atomics.cpp
+External/glslang/External/spirv-tools/source/val/validate_barriers.cpp
+External/glslang/External/spirv-tools/source/val/validate_bitwise.cpp
+External/glslang/External/spirv-tools/source/val/validate_builtins.cpp
+External/glslang/External/spirv-tools/source/val/validate_capability.cpp
+External/glslang/External/spirv-tools/source/val/validate_cfg.cpp
+External/glslang/External/spirv-tools/source/val/validate_composites.cpp
+External/glslang/External/spirv-tools/source/val/validate_constants.cpp
+External/glslang/External/spirv-tools/source/val/validate_conversion.cpp
+External/glslang/External/spirv-tools/source/val/validate_debug.cpp
+External/glslang/External/spirv-tools/source/val/validate_decorations.cpp
+External/glslang/External/spirv-tools/source/val/validate_derivatives.cpp
+External/glslang/External/spirv-tools/source/val/validate_execution_limitations.cpp
+External/glslang/External/spirv-tools/source/val/validate_extensions.cpp
+External/glslang/External/spirv-tools/source/val/validate_function.cpp
+External/glslang/External/spirv-tools/source/val/validate_id.cpp
+External/glslang/External/spirv-tools/source/val/validate_image.cpp
+External/glslang/External/spirv-tools/source/val/validate_instruction.cpp
+External/glslang/External/spirv-tools/source/val/validate_interfaces.cpp
+External/glslang/External/spirv-tools/source/val/validate_layout.cpp
+External/glslang/External/spirv-tools/source/val/validate_literals.cpp
+External/glslang/External/spirv-tools/source/val/validate_logicals.cpp
+External/glslang/External/spirv-tools/source/val/validate_memory.cpp
+External/glslang/External/spirv-tools/source/val/validate_memory_semantics.cpp
+External/glslang/External/spirv-tools/source/val/validate_misc.cpp
+External/glslang/External/spirv-tools/source/val/validate_mode_setting.cpp
+External/glslang/External/spirv-tools/source/val/validate_non_uniform.cpp
+External/glslang/External/spirv-tools/source/val/validate_primitives.cpp
+External/glslang/External/spirv-tools/source/val/validate_scopes.cpp
+External/glslang/External/spirv-tools/source/val/validate_small_type_uses.cpp
+External/glslang/External/spirv-tools/source/val/validate_type.cpp
+External/glslang/External/spirv-tools/source/val/validation_state.cpp
+)
+
+
+##
+## SPIRV-Tools-macOS Files
+##
+
+set( SPIRV__TOOLS_MAC_OS_INCLUDE_DIRS
+External/SPIRV-Cross
+External/glslang/External/spirv-tools/source
+External/glslang/External/spirv-tools/source/opt
+External/glslang/External/spirv-tools/source/reduce
+External/glslang/External/spirv-tools/source/util
+External/glslang/External/spirv-tools/source/val
+)
+
+set( SPIRV__TOOLS_MAC_OS_PUBLIC_HEADERS
+)
+
+set( SPIRV__TOOLS_MAC_OS_PROJECT_HEADERS
+External/glslang/External/spirv-tools/source/assembly_grammar.h
+External/glslang/External/spirv-tools/source/binary.h
+External/glslang/External/spirv-tools/source/cfa.h
+External/glslang/External/spirv-tools/source/diagnostic.h
+External/glslang/External/spirv-tools/source/disassemble.h
+External/glslang/External/spirv-tools/source/enum_set.h
+External/glslang/External/spirv-tools/source/enum_string_mapping.h
+External/glslang/External/spirv-tools/source/ext_inst.h
+External/glslang/External/spirv-tools/source/extensions.h
+External/glslang/External/spirv-tools/source/instruction.h
+External/glslang/External/spirv-tools/source/latest_version_glsl_std_450_header.h
+External/glslang/External/spirv-tools/source/latest_version_opencl_std_header.h
+External/glslang/External/spirv-tools/source/latest_version_spirv_header.h
+External/glslang/External/spirv-tools/source/macro.h
+External/glslang/External/spirv-tools/source/name_mapper.h
+External/glslang/External/spirv-tools/source/opcode.h
+External/glslang/External/spirv-tools/source/operand.h
+External/glslang/External/spirv-tools/source/opt/aggressive_dead_code_elim_pass.h
+External/glslang/External/spirv-tools/source/opt/amd_ext_to_khr.h
+External/glslang/External/spirv-tools/source/opt/basic_block.h
+External/glslang/External/spirv-tools/source/opt/block_merge_pass.h
+External/glslang/External/spirv-tools/source/opt/block_merge_util.h
+External/glslang/External/spirv-tools/source/opt/build_module.h
+External/glslang/External/spirv-tools/source/opt/ccp_pass.h
+External/glslang/External/spirv-tools/source/opt/cfg.h
+External/glslang/External/spirv-tools/source/opt/cfg_cleanup_pass.h
+External/glslang/External/spirv-tools/source/opt/code_sink.h
+External/glslang/External/spirv-tools/source/opt/combine_access_chains.h
+External/glslang/External/spirv-tools/source/opt/compact_ids_pass.h
+External/glslang/External/spirv-tools/source/opt/composite.h
+External/glslang/External/spirv-tools/source/opt/const_folding_rules.h
+External/glslang/External/spirv-tools/source/opt/constants.h
+External/glslang/External/spirv-tools/source/opt/convert_to_half_pass.h
+External/glslang/External/spirv-tools/source/opt/copy_prop_arrays.h
+External/glslang/External/spirv-tools/source/opt/dead_branch_elim_pass.h
+External/glslang/External/spirv-tools/source/opt/dead_insert_elim_pass.h
+External/glslang/External/spirv-tools/source/opt/dead_variable_elimination.h
+External/glslang/External/spirv-tools/source/opt/decompose_initialized_variables_pass.h
+External/glslang/External/spirv-tools/source/opt/decoration_manager.h
+External/glslang/External/spirv-tools/source/opt/def_use_manager.h
+External/glslang/External/spirv-tools/source/opt/desc_sroa.h
+External/glslang/External/spirv-tools/source/opt/dominator_analysis.h
+External/glslang/External/spirv-tools/source/opt/dominator_tree.h
+External/glslang/External/spirv-tools/source/opt/eliminate_dead_constant_pass.h
+External/glslang/External/spirv-tools/source/opt/eliminate_dead_functions_pass.h
+External/glslang/External/spirv-tools/source/opt/eliminate_dead_functions_util.h
+External/glslang/External/spirv-tools/source/opt/eliminate_dead_members_pass.h
+External/glslang/External/spirv-tools/source/opt/feature_manager.h
+External/glslang/External/spirv-tools/source/opt/fix_storage_class.h
+External/glslang/External/spirv-tools/source/opt/flatten_decoration_pass.h
+External/glslang/External/spirv-tools/source/opt/fold.h
+External/glslang/External/spirv-tools/source/opt/fold_spec_constant_op_and_composite_pass.h
+External/glslang/External/spirv-tools/source/opt/folding_rules.h
+External/glslang/External/spirv-tools/source/opt/freeze_spec_constant_value_pass.h
+External/glslang/External/spirv-tools/source/opt/function.h
+External/glslang/External/spirv-tools/source/opt/generate_webgpu_initializers_pass.h
+External/glslang/External/spirv-tools/source/opt/graphics_robust_access_pass.h
+External/glslang/External/spirv-tools/source/opt/if_conversion.h
+External/glslang/External/spirv-tools/source/opt/inline_exhaustive_pass.h
+External/glslang/External/spirv-tools/source/opt/inline_opaque_pass.h
+External/glslang/External/spirv-tools/source/opt/inline_pass.h
+External/glslang/External/spirv-tools/source/opt/inst_bindless_check_pass.h
+External/glslang/External/spirv-tools/source/opt/inst_buff_addr_check_pass.h
+External/glslang/External/spirv-tools/source/opt/instruction.h
+External/glslang/External/spirv-tools/source/opt/instruction_list.h
+External/glslang/External/spirv-tools/source/opt/instrument_pass.h
+External/glslang/External/spirv-tools/source/opt/ir_builder.h
+External/glslang/External/spirv-tools/source/opt/ir_context.h
+External/glslang/External/spirv-tools/source/opt/ir_loader.h
+External/glslang/External/spirv-tools/source/opt/iterator.h
+External/glslang/External/spirv-tools/source/opt/legalize_vector_shuffle_pass.h
+External/glslang/External/spirv-tools/source/opt/licm_pass.h
+External/glslang/External/spirv-tools/source/opt/local_access_chain_convert_pass.h
+External/glslang/External/spirv-tools/source/opt/local_redundancy_elimination.h
+External/glslang/External/spirv-tools/source/opt/local_single_block_elim_pass.h
+External/glslang/External/spirv-tools/source/opt/local_single_store_elim_pass.h
+External/glslang/External/spirv-tools/source/opt/log.h
+External/glslang/External/spirv-tools/source/opt/loop_dependence.h
+External/glslang/External/spirv-tools/source/opt/loop_descriptor.h
+External/glslang/External/spirv-tools/source/opt/loop_fission.h
+External/glslang/External/spirv-tools/source/opt/loop_fusion.h
+External/glslang/External/spirv-tools/source/opt/loop_fusion_pass.h
+External/glslang/External/spirv-tools/source/opt/loop_peeling.h
+External/glslang/External/spirv-tools/source/opt/loop_unroller.h
+External/glslang/External/spirv-tools/source/opt/loop_unswitch_pass.h
+External/glslang/External/spirv-tools/source/opt/loop_utils.h
+External/glslang/External/spirv-tools/source/opt/mem_pass.h
+External/glslang/External/spirv-tools/source/opt/merge_return_pass.h
+External/glslang/External/spirv-tools/source/opt/module.h
+External/glslang/External/spirv-tools/source/opt/null_pass.h
+External/glslang/External/spirv-tools/source/opt/pass.h
+External/glslang/External/spirv-tools/source/opt/pass_manager.h
+External/glslang/External/spirv-tools/source/opt/passes.h
+External/glslang/External/spirv-tools/source/opt/pch_source_opt.h
+External/glslang/External/spirv-tools/source/opt/private_to_local_pass.h
+External/glslang/External/spirv-tools/source/opt/process_lines_pass.h
+External/glslang/External/spirv-tools/source/opt/propagator.h
+External/glslang/External/spirv-tools/source/opt/reduce_load_size.h
+External/glslang/External/spirv-tools/source/opt/redundancy_elimination.h
+External/glslang/External/spirv-tools/source/opt/reflect.h
+External/glslang/External/spirv-tools/source/opt/register_pressure.h
+External/glslang/External/spirv-tools/source/opt/relax_float_ops_pass.h
+External/glslang/External/spirv-tools/source/opt/remove_duplicates_pass.h
+External/glslang/External/spirv-tools/source/opt/replace_invalid_opc.h
+External/glslang/External/spirv-tools/source/opt/scalar_analysis.h
+External/glslang/External/spirv-tools/source/opt/scalar_analysis_nodes.h
+External/glslang/External/spirv-tools/source/opt/scalar_replacement_pass.h
+External/glslang/External/spirv-tools/source/opt/set_spec_constant_default_value_pass.h
+External/glslang/External/spirv-tools/source/opt/simplification_pass.h
+External/glslang/External/spirv-tools/source/opt/split_invalid_unreachable_pass.h
+External/glslang/External/spirv-tools/source/opt/ssa_rewrite_pass.h
+External/glslang/External/spirv-tools/source/opt/strength_reduction_pass.h
+External/glslang/External/spirv-tools/source/opt/strip_atomic_counter_memory_pass.h
+External/glslang/External/spirv-tools/source/opt/strip_debug_info_pass.h
+External/glslang/External/spirv-tools/source/opt/strip_reflect_info_pass.h
+External/glslang/External/spirv-tools/source/opt/struct_cfg_analysis.h
+External/glslang/External/spirv-tools/source/opt/tree_iterator.h
+External/glslang/External/spirv-tools/source/opt/type_manager.h
+External/glslang/External/spirv-tools/source/opt/types.h
+External/glslang/External/spirv-tools/source/opt/unify_const_pass.h
+External/glslang/External/spirv-tools/source/opt/upgrade_memory_model.h
+External/glslang/External/spirv-tools/source/opt/value_number_table.h
+External/glslang/External/spirv-tools/source/opt/vector_dce.h
+External/glslang/External/spirv-tools/source/opt/workaround1209.h
+External/glslang/External/spirv-tools/source/opt/wrap_opkill.h
+External/glslang/External/spirv-tools/source/parsed_operand.h
+External/glslang/External/spirv-tools/source/pch_source.h
+External/glslang/External/spirv-tools/source/print.h
+External/glslang/External/spirv-tools/source/reduce/change_operand_reduction_opportunity.h
+External/glslang/External/spirv-tools/source/reduce/change_operand_to_undef_reduction_opportunity.h
+External/glslang/External/spirv-tools/source/reduce/conditional_branch_to_simple_conditional_branch_opportunity_finder.h
+External/glslang/External/spirv-tools/source/reduce/conditional_branch_to_simple_conditional_branch_reduction_opportunity.h
+External/glslang/External/spirv-tools/source/reduce/merge_blocks_reduction_opportunity.h
+External/glslang/External/spirv-tools/source/reduce/merge_blocks_reduction_opportunity_finder.h
+External/glslang/External/spirv-tools/source/reduce/operand_to_const_reduction_opportunity_finder.h
+External/glslang/External/spirv-tools/source/reduce/operand_to_dominating_id_reduction_opportunity_finder.h
+External/glslang/External/spirv-tools/source/reduce/operand_to_undef_reduction_opportunity_finder.h
+External/glslang/External/spirv-tools/source/reduce/pch_source_reduce.h
+External/glslang/External/spirv-tools/source/reduce/reducer.h
+External/glslang/External/spirv-tools/source/reduce/reduction_opportunity.h
+External/glslang/External/spirv-tools/source/reduce/reduction_opportunity_finder.h
+External/glslang/External/spirv-tools/source/reduce/reduction_pass.h
+External/glslang/External/spirv-tools/source/reduce/reduction_util.h
+External/glslang/External/spirv-tools/source/reduce/remove_block_reduction_opportunity.h
+External/glslang/External/spirv-tools/source/reduce/remove_block_reduction_opportunity_finder.h
+External/glslang/External/spirv-tools/source/reduce/remove_function_reduction_opportunity.h
+External/glslang/External/spirv-tools/source/reduce/remove_function_reduction_opportunity_finder.h
+External/glslang/External/spirv-tools/source/reduce/remove_instruction_reduction_opportunity.h
+External/glslang/External/spirv-tools/source/reduce/remove_selection_reduction_opportunity.h
+External/glslang/External/spirv-tools/source/reduce/remove_selection_reduction_opportunity_finder.h
+External/glslang/External/spirv-tools/source/reduce/remove_unreferenced_instruction_reduction_opportunity_finder.h
+External/glslang/External/spirv-tools/source/reduce/simple_conditional_branch_to_branch_opportunity_finder.h
+External/glslang/External/spirv-tools/source/reduce/simple_conditional_branch_to_branch_reduction_opportunity.h
+External/glslang/External/spirv-tools/source/reduce/structured_loop_to_selection_reduction_opportunity.h
+External/glslang/External/spirv-tools/source/reduce/structured_loop_to_selection_reduction_opportunity_finder.h
+External/glslang/External/spirv-tools/source/spirv_constant.h
+External/glslang/External/spirv-tools/source/spirv_definition.h
+External/glslang/External/spirv-tools/source/spirv_endian.h
+External/glslang/External/spirv-tools/source/spirv_fuzzer_options.h
+External/glslang/External/spirv-tools/source/spirv_optimizer_options.h
+External/glslang/External/spirv-tools/source/spirv_reducer_options.h
+External/glslang/External/spirv-tools/source/spirv_target_env.h
+External/glslang/External/spirv-tools/source/spirv_validator_options.h
+External/glslang/External/spirv-tools/source/table.h
+External/glslang/External/spirv-tools/source/text.h
+External/glslang/External/spirv-tools/source/text_handler.h
+External/glslang/External/spirv-tools/source/util/bit_vector.h
+External/glslang/External/spirv-tools/source/util/bitutils.h
+External/glslang/External/spirv-tools/source/util/hex_float.h
+External/glslang/External/spirv-tools/source/util/ilist.h
+External/glslang/External/spirv-tools/source/util/ilist_node.h
+External/glslang/External/spirv-tools/source/util/make_unique.h
+External/glslang/External/spirv-tools/source/util/parse_number.h
+External/glslang/External/spirv-tools/source/util/small_vector.h
+External/glslang/External/spirv-tools/source/util/string_utils.h
+External/glslang/External/spirv-tools/source/util/timer.h
+External/glslang/External/spirv-tools/source/val/basic_block.h
+External/glslang/External/spirv-tools/source/val/construct.h
+External/glslang/External/spirv-tools/source/val/decoration.h
+External/glslang/External/spirv-tools/source/val/function.h
+External/glslang/External/spirv-tools/source/val/instruction.h
+External/glslang/External/spirv-tools/source/val/validate.h
+External/glslang/External/spirv-tools/source/val/validate_memory_semantics.h
+External/glslang/External/spirv-tools/source/val/validate_scopes.h
+External/glslang/External/spirv-tools/source/val/validation_state.h
+)
+
+set( SPIRV__TOOLS_MAC_OS_PRIVATE_HEADERS
+)
+
+set( SPIRV__TOOLS_MAC_OS_SOURCES
+External/glslang/External/spirv-tools/source/assembly_grammar.cpp
+External/glslang/External/spirv-tools/source/binary.cpp
+External/glslang/External/spirv-tools/source/diagnostic.cpp
+External/glslang/External/spirv-tools/source/disassemble.cpp
+External/glslang/External/spirv-tools/source/enum_string_mapping.cpp
+External/glslang/External/spirv-tools/source/ext_inst.cpp
+External/glslang/External/spirv-tools/source/extensions.cpp
+External/glslang/External/spirv-tools/source/libspirv.cpp
+External/glslang/External/spirv-tools/source/link/linker.cpp
+External/glslang/External/spirv-tools/source/name_mapper.cpp
+External/glslang/External/spirv-tools/source/opcode.cpp
+External/glslang/External/spirv-tools/source/operand.cpp
+External/glslang/External/spirv-tools/source/opt/aggressive_dead_code_elim_pass.cpp
+External/glslang/External/spirv-tools/source/opt/amd_ext_to_khr.cpp
+External/glslang/External/spirv-tools/source/opt/basic_block.cpp
+External/glslang/External/spirv-tools/source/opt/block_merge_pass.cpp
+External/glslang/External/spirv-tools/source/opt/block_merge_util.cpp
+External/glslang/External/spirv-tools/source/opt/build_module.cpp
+External/glslang/External/spirv-tools/source/opt/ccp_pass.cpp
+External/glslang/External/spirv-tools/source/opt/cfg.cpp
+External/glslang/External/spirv-tools/source/opt/cfg_cleanup_pass.cpp
+External/glslang/External/spirv-tools/source/opt/code_sink.cpp
+External/glslang/External/spirv-tools/source/opt/combine_access_chains.cpp
+External/glslang/External/spirv-tools/source/opt/compact_ids_pass.cpp
+External/glslang/External/spirv-tools/source/opt/composite.cpp
+External/glslang/External/spirv-tools/source/opt/const_folding_rules.cpp
+External/glslang/External/spirv-tools/source/opt/constants.cpp
+External/glslang/External/spirv-tools/source/opt/convert_to_half_pass.cpp
+External/glslang/External/spirv-tools/source/opt/copy_prop_arrays.cpp
+External/glslang/External/spirv-tools/source/opt/dead_branch_elim_pass.cpp
+External/glslang/External/spirv-tools/source/opt/dead_insert_elim_pass.cpp
+External/glslang/External/spirv-tools/source/opt/dead_variable_elimination.cpp
+External/glslang/External/spirv-tools/source/opt/decompose_initialized_variables_pass.cpp
+External/glslang/External/spirv-tools/source/opt/decoration_manager.cpp
+External/glslang/External/spirv-tools/source/opt/def_use_manager.cpp
+External/glslang/External/spirv-tools/source/opt/desc_sroa.cpp
+External/glslang/External/spirv-tools/source/opt/dominator_analysis.cpp
+External/glslang/External/spirv-tools/source/opt/dominator_tree.cpp
+External/glslang/External/spirv-tools/source/opt/eliminate_dead_constant_pass.cpp
+External/glslang/External/spirv-tools/source/opt/eliminate_dead_functions_pass.cpp
+External/glslang/External/spirv-tools/source/opt/eliminate_dead_functions_util.cpp
+External/glslang/External/spirv-tools/source/opt/eliminate_dead_members_pass.cpp
+External/glslang/External/spirv-tools/source/opt/feature_manager.cpp
+External/glslang/External/spirv-tools/source/opt/fix_storage_class.cpp
+External/glslang/External/spirv-tools/source/opt/flatten_decoration_pass.cpp
+External/glslang/External/spirv-tools/source/opt/fold.cpp
+External/glslang/External/spirv-tools/source/opt/fold_spec_constant_op_and_composite_pass.cpp
+External/glslang/External/spirv-tools/source/opt/folding_rules.cpp
+External/glslang/External/spirv-tools/source/opt/freeze_spec_constant_value_pass.cpp
+External/glslang/External/spirv-tools/source/opt/function.cpp
+External/glslang/External/spirv-tools/source/opt/generate_webgpu_initializers_pass.cpp
+External/glslang/External/spirv-tools/source/opt/graphics_robust_access_pass.cpp
+External/glslang/External/spirv-tools/source/opt/if_conversion.cpp
+External/glslang/External/spirv-tools/source/opt/inline_exhaustive_pass.cpp
+External/glslang/External/spirv-tools/source/opt/inline_opaque_pass.cpp
+External/glslang/External/spirv-tools/source/opt/inline_pass.cpp
+External/glslang/External/spirv-tools/source/opt/inst_bindless_check_pass.cpp
+External/glslang/External/spirv-tools/source/opt/inst_buff_addr_check_pass.cpp
+External/glslang/External/spirv-tools/source/opt/instruction.cpp
+External/glslang/External/spirv-tools/source/opt/instruction_list.cpp
+External/glslang/External/spirv-tools/source/opt/instrument_pass.cpp
+External/glslang/External/spirv-tools/source/opt/ir_context.cpp
+External/glslang/External/spirv-tools/source/opt/ir_loader.cpp
+External/glslang/External/spirv-tools/source/opt/legalize_vector_shuffle_pass.cpp
+External/glslang/External/spirv-tools/source/opt/licm_pass.cpp
+External/glslang/External/spirv-tools/source/opt/local_access_chain_convert_pass.cpp
+External/glslang/External/spirv-tools/source/opt/local_redundancy_elimination.cpp
+External/glslang/External/spirv-tools/source/opt/local_single_block_elim_pass.cpp
+External/glslang/External/spirv-tools/source/opt/local_single_store_elim_pass.cpp
+External/glslang/External/spirv-tools/source/opt/loop_dependence.cpp
+External/glslang/External/spirv-tools/source/opt/loop_dependence_helpers.cpp
+External/glslang/External/spirv-tools/source/opt/loop_descriptor.cpp
+External/glslang/External/spirv-tools/source/opt/loop_fission.cpp
+External/glslang/External/spirv-tools/source/opt/loop_fusion.cpp
+External/glslang/External/spirv-tools/source/opt/loop_fusion_pass.cpp
+External/glslang/External/spirv-tools/source/opt/loop_peeling.cpp
+External/glslang/External/spirv-tools/source/opt/loop_unroller.cpp
+External/glslang/External/spirv-tools/source/opt/loop_unswitch_pass.cpp
+External/glslang/External/spirv-tools/source/opt/loop_utils.cpp
+External/glslang/External/spirv-tools/source/opt/mem_pass.cpp
+External/glslang/External/spirv-tools/source/opt/merge_return_pass.cpp
+External/glslang/External/spirv-tools/source/opt/module.cpp
+External/glslang/External/spirv-tools/source/opt/optimizer.cpp
+External/glslang/External/spirv-tools/source/opt/pass.cpp
+External/glslang/External/spirv-tools/source/opt/pass_manager.cpp
+External/glslang/External/spirv-tools/source/opt/pch_source_opt.cpp
+External/glslang/External/spirv-tools/source/opt/private_to_local_pass.cpp
+External/glslang/External/spirv-tools/source/opt/process_lines_pass.cpp
+External/glslang/External/spirv-tools/source/opt/propagator.cpp
+External/glslang/External/spirv-tools/source/opt/reduce_load_size.cpp
+External/glslang/External/spirv-tools/source/opt/redundancy_elimination.cpp
+External/glslang/External/spirv-tools/source/opt/register_pressure.cpp
+External/glslang/External/spirv-tools/source/opt/relax_float_ops_pass.cpp
+External/glslang/External/spirv-tools/source/opt/remove_duplicates_pass.cpp
+External/glslang/External/spirv-tools/source/opt/replace_invalid_opc.cpp
+External/glslang/External/spirv-tools/source/opt/scalar_analysis.cpp
+External/glslang/External/spirv-tools/source/opt/scalar_analysis_simplification.cpp
+External/glslang/External/spirv-tools/source/opt/scalar_replacement_pass.cpp
+External/glslang/External/spirv-tools/source/opt/set_spec_constant_default_value_pass.cpp
+External/glslang/External/spirv-tools/source/opt/simplification_pass.cpp
+External/glslang/External/spirv-tools/source/opt/split_invalid_unreachable_pass.cpp
+External/glslang/External/spirv-tools/source/opt/ssa_rewrite_pass.cpp
+External/glslang/External/spirv-tools/source/opt/strength_reduction_pass.cpp
+External/glslang/External/spirv-tools/source/opt/strip_atomic_counter_memory_pass.cpp
+External/glslang/External/spirv-tools/source/opt/strip_debug_info_pass.cpp
+External/glslang/External/spirv-tools/source/opt/strip_reflect_info_pass.cpp
+External/glslang/External/spirv-tools/source/opt/struct_cfg_analysis.cpp
+External/glslang/External/spirv-tools/source/opt/type_manager.cpp
+External/glslang/External/spirv-tools/source/opt/types.cpp
+External/glslang/External/spirv-tools/source/opt/unify_const_pass.cpp
+External/glslang/External/spirv-tools/source/opt/upgrade_memory_model.cpp
+External/glslang/External/spirv-tools/source/opt/value_number_table.cpp
+External/glslang/External/spirv-tools/source/opt/vector_dce.cpp
+External/glslang/External/spirv-tools/source/opt/workaround1209.cpp
+External/glslang/External/spirv-tools/source/opt/wrap_opkill.cpp
+External/glslang/External/spirv-tools/source/parsed_operand.cpp
+External/glslang/External/spirv-tools/source/pch_source.cpp
+External/glslang/External/spirv-tools/source/print.cpp
+External/glslang/External/spirv-tools/source/reduce/change_operand_reduction_opportunity.cpp
+External/glslang/External/spirv-tools/source/reduce/change_operand_to_undef_reduction_opportunity.cpp
+External/glslang/External/spirv-tools/source/reduce/conditional_branch_to_simple_conditional_branch_opportunity_finder.cpp
+External/glslang/External/spirv-tools/source/reduce/conditional_branch_to_simple_conditional_branch_reduction_opportunity.cpp
+External/glslang/External/spirv-tools/source/reduce/merge_blocks_reduction_opportunity.cpp
+External/glslang/External/spirv-tools/source/reduce/merge_blocks_reduction_opportunity_finder.cpp
+External/glslang/External/spirv-tools/source/reduce/operand_to_const_reduction_opportunity_finder.cpp
+External/glslang/External/spirv-tools/source/reduce/operand_to_dominating_id_reduction_opportunity_finder.cpp
+External/glslang/External/spirv-tools/source/reduce/operand_to_undef_reduction_opportunity_finder.cpp
+External/glslang/External/spirv-tools/source/reduce/pch_source_reduce.cpp
+External/glslang/External/spirv-tools/source/reduce/reducer.cpp
+External/glslang/External/spirv-tools/source/reduce/reduction_opportunity.cpp
+External/glslang/External/spirv-tools/source/reduce/reduction_pass.cpp
+External/glslang/External/spirv-tools/source/reduce/reduction_util.cpp
+External/glslang/External/spirv-tools/source/reduce/remove_block_reduction_opportunity.cpp
+External/glslang/External/spirv-tools/source/reduce/remove_block_reduction_opportunity_finder.cpp
+External/glslang/External/spirv-tools/source/reduce/remove_function_reduction_opportunity.cpp
+External/glslang/External/spirv-tools/source/reduce/remove_function_reduction_opportunity_finder.cpp
+External/glslang/External/spirv-tools/source/reduce/remove_instruction_reduction_opportunity.cpp
+External/glslang/External/spirv-tools/source/reduce/remove_selection_reduction_opportunity.cpp
+External/glslang/External/spirv-tools/source/reduce/remove_selection_reduction_opportunity_finder.cpp
+External/glslang/External/spirv-tools/source/reduce/remove_unreferenced_instruction_reduction_opportunity_finder.cpp
+External/glslang/External/spirv-tools/source/reduce/simple_conditional_branch_to_branch_opportunity_finder.cpp
+External/glslang/External/spirv-tools/source/reduce/simple_conditional_branch_to_branch_reduction_opportunity.cpp
+External/glslang/External/spirv-tools/source/reduce/structured_loop_to_selection_reduction_opportunity.cpp
+External/glslang/External/spirv-tools/source/reduce/structured_loop_to_selection_reduction_opportunity_finder.cpp
+External/glslang/External/spirv-tools/source/software_version.cpp
+External/glslang/External/spirv-tools/source/spirv_endian.cpp
+External/glslang/External/spirv-tools/source/spirv_fuzzer_options.cpp
+External/glslang/External/spirv-tools/source/spirv_optimizer_options.cpp
+External/glslang/External/spirv-tools/source/spirv_reducer_options.cpp
+External/glslang/External/spirv-tools/source/spirv_target_env.cpp
+External/glslang/External/spirv-tools/source/spirv_validator_options.cpp
+External/glslang/External/spirv-tools/source/table.cpp
+External/glslang/External/spirv-tools/source/text.cpp
+External/glslang/External/spirv-tools/source/text_handler.cpp
+External/glslang/External/spirv-tools/source/util/bit_vector.cpp
+External/glslang/External/spirv-tools/source/util/parse_number.cpp
+External/glslang/External/spirv-tools/source/util/string_utils.cpp
+External/glslang/External/spirv-tools/source/util/timer.cpp
+External/glslang/External/spirv-tools/source/val/basic_block.cpp
+External/glslang/External/spirv-tools/source/val/construct.cpp
+External/glslang/External/spirv-tools/source/val/function.cpp
+External/glslang/External/spirv-tools/source/val/instruction.cpp
+External/glslang/External/spirv-tools/source/val/validate.cpp
+External/glslang/External/spirv-tools/source/val/validate_adjacency.cpp
+External/glslang/External/spirv-tools/source/val/validate_annotation.cpp
+External/glslang/External/spirv-tools/source/val/validate_arithmetics.cpp
+External/glslang/External/spirv-tools/source/val/validate_atomics.cpp
+External/glslang/External/spirv-tools/source/val/validate_barriers.cpp
+External/glslang/External/spirv-tools/source/val/validate_bitwise.cpp
+External/glslang/External/spirv-tools/source/val/validate_builtins.cpp
+External/glslang/External/spirv-tools/source/val/validate_capability.cpp
+External/glslang/External/spirv-tools/source/val/validate_cfg.cpp
+External/glslang/External/spirv-tools/source/val/validate_composites.cpp
+External/glslang/External/spirv-tools/source/val/validate_constants.cpp
+External/glslang/External/spirv-tools/source/val/validate_conversion.cpp
+External/glslang/External/spirv-tools/source/val/validate_debug.cpp
+External/glslang/External/spirv-tools/source/val/validate_decorations.cpp
+External/glslang/External/spirv-tools/source/val/validate_derivatives.cpp
+External/glslang/External/spirv-tools/source/val/validate_execution_limitations.cpp
+External/glslang/External/spirv-tools/source/val/validate_extensions.cpp
+External/glslang/External/spirv-tools/source/val/validate_function.cpp
+External/glslang/External/spirv-tools/source/val/validate_id.cpp
+External/glslang/External/spirv-tools/source/val/validate_image.cpp
+External/glslang/External/spirv-tools/source/val/validate_instruction.cpp
+External/glslang/External/spirv-tools/source/val/validate_interfaces.cpp
+External/glslang/External/spirv-tools/source/val/validate_layout.cpp
+External/glslang/External/spirv-tools/source/val/validate_literals.cpp
+External/glslang/External/spirv-tools/source/val/validate_logicals.cpp
+External/glslang/External/spirv-tools/source/val/validate_memory.cpp
+External/glslang/External/spirv-tools/source/val/validate_memory_semantics.cpp
+External/glslang/External/spirv-tools/source/val/validate_misc.cpp
+External/glslang/External/spirv-tools/source/val/validate_mode_setting.cpp
+External/glslang/External/spirv-tools/source/val/validate_non_uniform.cpp
+External/glslang/External/spirv-tools/source/val/validate_primitives.cpp
+External/glslang/External/spirv-tools/source/val/validate_scopes.cpp
+External/glslang/External/spirv-tools/source/val/validate_small_type_uses.cpp
+External/glslang/External/spirv-tools/source/val/validate_type.cpp
+External/glslang/External/spirv-tools/source/val/validation_state.cpp
+)
+
+
+##
+## glslang-iOS Files
+##
+
+set( GLSLANG_I_OS_INCLUDE_DIRS
+External/SPIRV-Cross
+External/glslang/External/spirv-tools/source
+External/glslang/External/spirv-tools/source/opt
+External/glslang/External/spirv-tools/source/reduce
+External/glslang/External/spirv-tools/source/util
+External/glslang/External/spirv-tools/source/val
+External/glslang/OGLCompilersDLL
+External/glslang/SPIRV
+External/glslang/glslang/Include
+External/glslang/glslang/MachineIndependent
+External/glslang/glslang/MachineIndependent/preprocessor
+External/glslang/glslang/OSDependent
+External/glslang/glslang/Public
+)
+
+set( GLSLANG_I_OS_PUBLIC_HEADERS
+)
+
+set( GLSLANG_I_OS_PROJECT_HEADERS
+External/glslang/OGLCompilersDLL/InitializeDll.h
+External/glslang/SPIRV/GLSL.ext.AMD.h
+External/glslang/SPIRV/GLSL.ext.EXT.h
+External/glslang/SPIRV/GLSL.ext.KHR.h
+External/glslang/SPIRV/GLSL.ext.NV.h
+External/glslang/SPIRV/GLSL.std.450.h
+External/glslang/SPIRV/GlslangToSpv.h
+External/glslang/SPIRV/Logger.h
+External/glslang/SPIRV/SPVRemapper.h
+External/glslang/SPIRV/SpvBuilder.h
+External/glslang/SPIRV/SpvTools.h
+External/glslang/SPIRV/bitutils.h
+External/glslang/SPIRV/disassemble.h
+External/glslang/SPIRV/doc.h
+External/glslang/SPIRV/hex_float.h
+External/glslang/SPIRV/spirv.hpp
+External/glslang/SPIRV/spvIR.h
+External/glslang/glslang/Include/BaseTypes.h
+External/glslang/glslang/Include/Common.h
+External/glslang/glslang/Include/ConstantUnion.h
+External/glslang/glslang/Include/InfoSink.h
+External/glslang/glslang/Include/InitializeGlobals.h
+External/glslang/glslang/Include/PoolAlloc.h
+External/glslang/glslang/Include/ResourceLimits.h
+External/glslang/glslang/Include/ShHandle.h
+External/glslang/glslang/Include/Types.h
+External/glslang/glslang/Include/arrays.h
+External/glslang/glslang/Include/intermediate.h
+External/glslang/glslang/Include/revision.h
+External/glslang/glslang/MachineIndependent/Initialize.h
+External/glslang/glslang/MachineIndependent/LiveTraverser.h
+External/glslang/glslang/MachineIndependent/ParseHelper.h
+External/glslang/glslang/MachineIndependent/RemoveTree.h
+External/glslang/glslang/MachineIndependent/Scan.h
+External/glslang/glslang/MachineIndependent/ScanContext.h
+External/glslang/glslang/MachineIndependent/SymbolTable.h
+External/glslang/glslang/MachineIndependent/Versions.h
+External/glslang/glslang/MachineIndependent/attribute.h
+External/glslang/glslang/MachineIndependent/gl_types.h
+External/glslang/glslang/MachineIndependent/glslang_tab.cpp.h
+External/glslang/glslang/MachineIndependent/iomapper.h
+External/glslang/glslang/MachineIndependent/localintermediate.h
+External/glslang/glslang/MachineIndependent/parseVersions.h
+External/glslang/glslang/MachineIndependent/pch.h
+External/glslang/glslang/MachineIndependent/preprocessor/PpContext.h
+External/glslang/glslang/MachineIndependent/preprocessor/PpTokens.h
+External/glslang/glslang/MachineIndependent/propagateNoContraction.h
+External/glslang/glslang/MachineIndependent/reflection.h
+External/glslang/glslang/OSDependent/osinclude.h
+External/glslang/glslang/Public/ShaderLang.h
+)
+
+set( GLSLANG_I_OS_PRIVATE_HEADERS
+)
+
+set( GLSLANG_I_OS_SOURCES
+External/glslang/OGLCompilersDLL/InitializeDll.cpp
+External/glslang/SPIRV/GlslangToSpv.cpp
+External/glslang/SPIRV/InReadableOrder.cpp
+External/glslang/SPIRV/Logger.cpp
+External/glslang/SPIRV/SPVRemapper.cpp
+External/glslang/SPIRV/SpvBuilder.cpp
+External/glslang/SPIRV/SpvPostProcess.cpp
+External/glslang/SPIRV/SpvTools.cpp
+External/glslang/SPIRV/disassemble.cpp
+External/glslang/SPIRV/doc.cpp
+External/glslang/glslang/GenericCodeGen/CodeGen.cpp
+External/glslang/glslang/GenericCodeGen/Link.cpp
+External/glslang/glslang/MachineIndependent/Constant.cpp
+External/glslang/glslang/MachineIndependent/InfoSink.cpp
+External/glslang/glslang/MachineIndependent/Initialize.cpp
+External/glslang/glslang/MachineIndependent/IntermTraverse.cpp
+External/glslang/glslang/MachineIndependent/Intermediate.cpp
+External/glslang/glslang/MachineIndependent/ParseContextBase.cpp
+External/glslang/glslang/MachineIndependent/ParseHelper.cpp
+External/glslang/glslang/MachineIndependent/PoolAlloc.cpp
+External/glslang/glslang/MachineIndependent/RemoveTree.cpp
+External/glslang/glslang/MachineIndependent/Scan.cpp
+External/glslang/glslang/MachineIndependent/ShaderLang.cpp
+External/glslang/glslang/MachineIndependent/SymbolTable.cpp
+External/glslang/glslang/MachineIndependent/Versions.cpp
+External/glslang/glslang/MachineIndependent/attribute.cpp
+External/glslang/glslang/MachineIndependent/glslang_tab.cpp
+External/glslang/glslang/MachineIndependent/intermOut.cpp
+External/glslang/glslang/MachineIndependent/iomapper.cpp
+External/glslang/glslang/MachineIndependent/limits.cpp
+External/glslang/glslang/MachineIndependent/linkValidate.cpp
+External/glslang/glslang/MachineIndependent/parseConst.cpp
+External/glslang/glslang/MachineIndependent/pch.cpp
+External/glslang/glslang/MachineIndependent/preprocessor/Pp.cpp
+External/glslang/glslang/MachineIndependent/preprocessor/PpAtom.cpp
+External/glslang/glslang/MachineIndependent/preprocessor/PpContext.cpp
+External/glslang/glslang/MachineIndependent/preprocessor/PpScanner.cpp
+External/glslang/glslang/MachineIndependent/preprocessor/PpTokens.cpp
+External/glslang/glslang/MachineIndependent/propagateNoContraction.cpp
+External/glslang/glslang/MachineIndependent/reflection.cpp
+External/glslang/glslang/OSDependent/Unix/ossource.cpp
+)
+
+
+##
+## glslang-macOS Files
+##
+
+set( GLSLANG_MAC_OS_INCLUDE_DIRS
+External/SPIRV-Cross
+External/glslang/External/spirv-tools/source
+External/glslang/External/spirv-tools/source/opt
+External/glslang/External/spirv-tools/source/reduce
+External/glslang/External/spirv-tools/source/util
+External/glslang/External/spirv-tools/source/val
+External/glslang/OGLCompilersDLL
+External/glslang/SPIRV
+External/glslang/glslang/Include
+External/glslang/glslang/MachineIndependent
+External/glslang/glslang/MachineIndependent/preprocessor
+External/glslang/glslang/OSDependent
+External/glslang/glslang/Public
+)
+
+set( GLSLANG_MAC_OS_PUBLIC_HEADERS
+)
+
+set( GLSLANG_MAC_OS_PROJECT_HEADERS
+External/glslang/OGLCompilersDLL/InitializeDll.h
+External/glslang/SPIRV/GLSL.ext.AMD.h
+External/glslang/SPIRV/GLSL.ext.EXT.h
+External/glslang/SPIRV/GLSL.ext.KHR.h
+External/glslang/SPIRV/GLSL.ext.NV.h
+External/glslang/SPIRV/GLSL.std.450.h
+External/glslang/SPIRV/GlslangToSpv.h
+External/glslang/SPIRV/Logger.h
+External/glslang/SPIRV/SPVRemapper.h
+External/glslang/SPIRV/SpvBuilder.h
+External/glslang/SPIRV/SpvTools.h
+External/glslang/SPIRV/bitutils.h
+External/glslang/SPIRV/disassemble.h
+External/glslang/SPIRV/doc.h
+External/glslang/SPIRV/hex_float.h
+External/glslang/SPIRV/spirv.hpp
+External/glslang/SPIRV/spvIR.h
+External/glslang/glslang/Include/BaseTypes.h
+External/glslang/glslang/Include/Common.h
+External/glslang/glslang/Include/ConstantUnion.h
+External/glslang/glslang/Include/InfoSink.h
+External/glslang/glslang/Include/InitializeGlobals.h
+External/glslang/glslang/Include/PoolAlloc.h
+External/glslang/glslang/Include/ResourceLimits.h
+External/glslang/glslang/Include/ShHandle.h
+External/glslang/glslang/Include/Types.h
+External/glslang/glslang/Include/arrays.h
+External/glslang/glslang/Include/intermediate.h
+External/glslang/glslang/Include/revision.h
+External/glslang/glslang/MachineIndependent/Initialize.h
+External/glslang/glslang/MachineIndependent/LiveTraverser.h
+External/glslang/glslang/MachineIndependent/ParseHelper.h
+External/glslang/glslang/MachineIndependent/RemoveTree.h
+External/glslang/glslang/MachineIndependent/Scan.h
+External/glslang/glslang/MachineIndependent/ScanContext.h
+External/glslang/glslang/MachineIndependent/SymbolTable.h
+External/glslang/glslang/MachineIndependent/Versions.h
+External/glslang/glslang/MachineIndependent/attribute.h
+External/glslang/glslang/MachineIndependent/gl_types.h
+External/glslang/glslang/MachineIndependent/glslang_tab.cpp.h
+External/glslang/glslang/MachineIndependent/iomapper.h
+External/glslang/glslang/MachineIndependent/localintermediate.h
+External/glslang/glslang/MachineIndependent/parseVersions.h
+External/glslang/glslang/MachineIndependent/pch.h
+External/glslang/glslang/MachineIndependent/preprocessor/PpContext.h
+External/glslang/glslang/MachineIndependent/preprocessor/PpTokens.h
+External/glslang/glslang/MachineIndependent/propagateNoContraction.h
+External/glslang/glslang/MachineIndependent/reflection.h
+External/glslang/glslang/OSDependent/osinclude.h
+External/glslang/glslang/Public/ShaderLang.h
+)
+
+set( GLSLANG_MAC_OS_PRIVATE_HEADERS
+)
+
+set( GLSLANG_MAC_OS_SOURCES
+External/glslang/OGLCompilersDLL/InitializeDll.cpp
+External/glslang/SPIRV/GlslangToSpv.cpp
+External/glslang/SPIRV/InReadableOrder.cpp
+External/glslang/SPIRV/Logger.cpp
+External/glslang/SPIRV/SPVRemapper.cpp
+External/glslang/SPIRV/SpvBuilder.cpp
+External/glslang/SPIRV/SpvPostProcess.cpp
+External/glslang/SPIRV/SpvTools.cpp
+External/glslang/SPIRV/disassemble.cpp
+External/glslang/SPIRV/doc.cpp
+External/glslang/glslang/GenericCodeGen/CodeGen.cpp
+External/glslang/glslang/GenericCodeGen/Link.cpp
+External/glslang/glslang/MachineIndependent/Constant.cpp
+External/glslang/glslang/MachineIndependent/InfoSink.cpp
+External/glslang/glslang/MachineIndependent/Initialize.cpp
+External/glslang/glslang/MachineIndependent/IntermTraverse.cpp
+External/glslang/glslang/MachineIndependent/Intermediate.cpp
+External/glslang/glslang/MachineIndependent/ParseContextBase.cpp
+External/glslang/glslang/MachineIndependent/ParseHelper.cpp
+External/glslang/glslang/MachineIndependent/PoolAlloc.cpp
+External/glslang/glslang/MachineIndependent/RemoveTree.cpp
+External/glslang/glslang/MachineIndependent/Scan.cpp
+External/glslang/glslang/MachineIndependent/ShaderLang.cpp
+External/glslang/glslang/MachineIndependent/SymbolTable.cpp
+External/glslang/glslang/MachineIndependent/Versions.cpp
+External/glslang/glslang/MachineIndependent/attribute.cpp
+External/glslang/glslang/MachineIndependent/glslang_tab.cpp
+External/glslang/glslang/MachineIndependent/intermOut.cpp
+External/glslang/glslang/MachineIndependent/iomapper.cpp
+External/glslang/glslang/MachineIndependent/limits.cpp
+External/glslang/glslang/MachineIndependent/linkValidate.cpp
+External/glslang/glslang/MachineIndependent/parseConst.cpp
+External/glslang/glslang/MachineIndependent/pch.cpp
+External/glslang/glslang/MachineIndependent/preprocessor/Pp.cpp
+External/glslang/glslang/MachineIndependent/preprocessor/PpAtom.cpp
+External/glslang/glslang/MachineIndependent/preprocessor/PpContext.cpp
+External/glslang/glslang/MachineIndependent/preprocessor/PpScanner.cpp
+External/glslang/glslang/MachineIndependent/preprocessor/PpTokens.cpp
+External/glslang/glslang/MachineIndependent/propagateNoContraction.cpp
+External/glslang/glslang/MachineIndependent/reflection.cpp
+External/glslang/glslang/OSDependent/Unix/ossource.cpp
+)
diff --git a/MoltenVK/CMakeLists.txt b/MoltenVK/CMakeLists.txt
new file mode 100644
index 0000000..cf2633d
--- /dev/null
+++ b/MoltenVK/CMakeLists.txt
@@ -0,0 +1,183 @@
+# Generated on 2019-11-10 1:31:50 by version 0.9.0 of mulle-xcode-to-cmake
+# Command line:
+#    mulle-xcode-to-cmake -2 -d export MoltenVK.xcodeproj
+
+
+cmake_minimum_required (VERSION 3.4)
+project( MoltenVK C)
+
+# ###
+# Build for mulle-objc (https://mulle-objc.github.io/):
+#
+#    mulle-sde init -m foundation/objc-porter executable
+#    mulle-sde craft
+#
+# [mulle-clang >= 8.0.0.0 and mulle-objc >= 0.15 required]
+#
+
+if( NOT DEPENDENCY_DIR)
+   set( DEPENDENCY_DIR "$ENV{DEPENDENCY_DIR}")
+endif()
+if( NOT DEPENDENCY_DIR)
+   set( DEPENDENCY_DIR "${PROJECT_SOURCE_DIR}/dependency")
+endif()
+if( EXISTS "${DEPENDENCY_DIR}")
+   if( NOT ADDICTION_DIR)
+      get_filename_component( ADDICTION_DIR "${DEPENDENCY_DIR}" DIRECTORY)
+      set( ADDICTION_DIR "${ADDICTION_DIR}/addiction")
+   endif()
+   set( CMAKE_FIND_FRAMEWORK "LAST")
+   include_directories( BEFORE SYSTEM
+      ${DEPENDENCY_DIR}/include
+      ${ADDICTION_DIR}/include
+   )
+   set( CMAKE_FRAMEWORK_PATH
+      ${DEPENDENCY_DIR}/Frameworks
+      ${ADDICTION_DIR}/Frameworks
+      ${CMAKE_FRAMEWORK_PATH}
+   )
+   set( CMAKE_LIBRARY_PATH
+      ${DEPENDENCY_DIR}/lib
+      ${ADDICTION_DIR}/lib
+      ${CMAKE_LIBRARY_PATH}
+   )
+   set( SKIP_FIND_FOUNDATION_LIBRARY ON)
+   execute_process( COMMAND mulle-sde stash-dir
+                    OUTPUT_VARIABLE MULLE_SOURCETREE_STASH_DIR)
+   string( STRIP "${MULLE_SOURCETREE_STASH_DIR}" MULLE_SOURCETREE_STASH_DIR)
+   execute_process( COMMAND mulle-sde linkorder --stash-dir "${MULLE_SOURCETREE_STASH_DIR}" --startup --simplify --output-format cmake
+                    WORKING_DIRECTORY "${PROJECT_SOURCE_DIR}"
+                    OUTPUT_VARIABLE MULLE_SDE_LINKER_FLAGS
+                    RESULT_VARIABLE RVAL)
+   if( NOT ${RVAL} EQUAL 0)
+      message( FATAL_ERROR "Failed to procure linkorder from mulle-sde. Old version ?")
+   endif()
+   message( STATUS "MULLE_SDE_LINKER_FLAGS=\"${MULLE_SDE_LINKER_FLAGS}\"")
+else()
+   message( STATUS "Not a mulle-sde build (\"${DEPENDENCY_DIR}\" does not exist)")
+endif()
+
+
+#
+# Platform specific definitions
+#
+
+if( APPLE)
+   # # CMAKE_OSX_SYSROOT must be set for CMAKE_OSX_DEPLOYMENT_TARGET (cmake bug)
+   # if( NOT CMAKE_OSX_SYSROOT)
+   #    set( CMAKE_OSX_SYSROOT "/" CACHE STRING "SDK for OSX" FORCE)   # means current OS X
+   # endif()
+   #
+   # # baseline set to 10.6 for rpath
+   # if( NOT CMAKE_OSX_DEPLOYMENT_TARGET)
+   #   set(CMAKE_OSX_DEPLOYMENT_TARGET "10.6" CACHE STRING "Deployment target for OSX" FORCE)
+   # endif()
+
+   set( CMAKE_POSITION_INDEPENDENT_CODE FALSE)
+   set( CMAKE_INSTALL_RPATH "@rpath/../lib")
+
+   set( BEGIN_ALL_LOAD "-all_load")
+   set( END_ALL_LOAD)
+else()
+   set( CMAKE_POSITION_INDEPENDENT_CODE TRUE)
+
+   if( WIN32)
+   # windows
+   else()
+   # linux / gcc
+      set( BEGIN_ALL_LOAD "-Wl,--whole-archive")
+      set( END_ALL_LOAD "-Wl,--no-whole-archive")
+      set( CMAKE_INSTALL_RPATH "\$ORIGIN/../lib")
+   endif()
+endif()
+
+##
+## Produce CMakeSourcesAndHeaders.txt with:
+##   mulle-xcode-to-cmake -t 'MoltenVK-iOS' -t 'MoltenVK-macOS' sexport > CMakeSourcesAndHeaders.txt
+##
+
+include( CMakeSourcesAndHeaders.txt)
+
+# uncomment this for mulle-objc to search libraries first
+# set( CMAKE_FIND_FRAMEWORK "LAST")
+
+# uncomment this for mulle-objc to search libraries first
+# set( CMAKE_FIND_FRAMEWORK "LAST")
+
+add_library( MoltenVK-iOS STATIC
+${MOLTEN_VK_I_OS_SOURCES}
+${MOLTEN_VK_I_OS_PUBLIC_HEADERS}
+${MOLTEN_VK_I_OS_PROJECT_HEADERS}
+${MOLTEN_VK_I_OS_PRIVATE_HEADERS}
+${MOLTEN_VK_I_OS_RESOURCES}
+)
+
+target_include_directories( MoltenVK-iOS
+   PUBLIC
+../Common
+MoltenVK/API
+MoltenVK/Commands
+MoltenVK/GPUObjects
+MoltenVK/Layers
+MoltenVK/OS
+MoltenVK/Utility
+MoltenVK/Vulkan
+)
+
+install( TARGETS MoltenVK-iOS DESTINATION "lib")
+install( FILES ${MOLTEN_VK_I_OS_PUBLIC_HEADERS} DESTINATION "include/MoltenVK-iOS")
+
+
+##
+## MoltenVK-iOS_shared
+##
+
+add_library( MoltenVK-iOS_shared SHARED
+${MOLTEN_VK_I_OS_SOURCES}
+)
+
+set_target_properties( MoltenVK-iOS_shared
+   PROPERTIES
+   OUTPUT_NAME MoltenVK-iOS)
+)
+
+install( TARGETS MoltenVK-iOS_shared DESTINATION "lib")
+
+add_library( MoltenVK-macOS STATIC
+${MOLTEN_VK_MAC_OS_SOURCES}
+${MOLTEN_VK_MAC_OS_PUBLIC_HEADERS}
+${MOLTEN_VK_MAC_OS_PROJECT_HEADERS}
+${MOLTEN_VK_MAC_OS_PRIVATE_HEADERS}
+${MOLTEN_VK_MAC_OS_RESOURCES}
+)
+
+target_include_directories( MoltenVK-macOS
+   PUBLIC
+../Common
+MoltenVK/API
+MoltenVK/Commands
+MoltenVK/GPUObjects
+MoltenVK/Layers
+MoltenVK/OS
+MoltenVK/Utility
+MoltenVK/Vulkan
+)
+
+install( TARGETS MoltenVK-macOS DESTINATION "lib")
+install( FILES ${MOLTEN_VK_MAC_OS_PUBLIC_HEADERS} DESTINATION "include/MoltenVK-macOS")
+
+
+##
+## MoltenVK-macOS_shared
+##
+
+add_library( MoltenVK-macOS_shared SHARED
+${MOLTEN_VK_MAC_OS_SOURCES}
+)
+
+set_target_properties( MoltenVK-macOS_shared
+   PROPERTIES
+   OUTPUT_NAME MoltenVK-macOS)
+)
+
+install( TARGETS MoltenVK-macOS_shared DESTINATION "lib")
diff --git a/MoltenVK/CMakeSourcesAndHeaders.txt b/MoltenVK/CMakeSourcesAndHeaders.txt
new file mode 100644
index 0000000..1246073
--- /dev/null
+++ b/MoltenVK/CMakeSourcesAndHeaders.txt
@@ -0,0 +1,280 @@
+# Generated on 2019-11-10 1:31:50 by version 0.9.0 of mulle-xcode-to-cmake
+# Command line:
+#    mulle-xcode-to-cmake -2 -d sexport MoltenVK.xcodeproj
+
+
+
+##
+## MoltenVK-iOS Files
+##
+
+set( MOLTEN_VK_I_OS_INCLUDE_DIRS
+../Common
+MoltenVK/API
+MoltenVK/Commands
+MoltenVK/GPUObjects
+MoltenVK/Layers
+MoltenVK/OS
+MoltenVK/Utility
+MoltenVK/Vulkan
+)
+
+set( MOLTEN_VK_I_OS_PUBLIC_HEADERS
+)
+
+set( MOLTEN_VK_I_OS_PROJECT_HEADERS
+../Common/MVKCommonEnvironment.h
+../Common/MVKLogging.h
+../Common/MVKOSExtensions.h
+../Common/MVKStrings.h
+MoltenVK/API/mvk_datatypes.h
+MoltenVK/API/mvk_vulkan.h
+MoltenVK/API/vk_mvk_moltenvk.h
+MoltenVK/Commands/MVKCmdDebug.h
+MoltenVK/Commands/MVKCmdDraw.h
+MoltenVK/Commands/MVKCmdPipeline.h
+MoltenVK/Commands/MVKCmdQueries.h
+MoltenVK/Commands/MVKCmdRenderPass.h
+MoltenVK/Commands/MVKCmdTransfer.h
+MoltenVK/Commands/MVKCommand.h
+MoltenVK/Commands/MVKCommandBuffer.h
+MoltenVK/Commands/MVKCommandEncoderState.h
+MoltenVK/Commands/MVKCommandEncodingPool.h
+MoltenVK/Commands/MVKCommandPipelineStateFactoryShaderSource.h
+MoltenVK/Commands/MVKCommandPool.h
+MoltenVK/Commands/MVKCommandResourceFactory.h
+MoltenVK/Commands/MVKMTLBufferAllocation.h
+MoltenVK/Commands/MVKMTLResourceBindings.h
+MoltenVK/GPUObjects/MVKBuffer.h
+MoltenVK/GPUObjects/MVKDescriptorSet.h
+MoltenVK/GPUObjects/MVKDevice.h
+MoltenVK/GPUObjects/MVKDeviceMemory.h
+MoltenVK/GPUObjects/MVKFramebuffer.h
+MoltenVK/GPUObjects/MVKImage.h
+MoltenVK/GPUObjects/MVKInstance.h
+MoltenVK/GPUObjects/MVKPipeline.h
+MoltenVK/GPUObjects/MVKQueryPool.h
+MoltenVK/GPUObjects/MVKQueue.h
+MoltenVK/GPUObjects/MVKRenderPass.h
+MoltenVK/GPUObjects/MVKResource.h
+MoltenVK/GPUObjects/MVKShaderModule.h
+MoltenVK/GPUObjects/MVKSurface.h
+MoltenVK/GPUObjects/MVKSwapchain.h
+MoltenVK/GPUObjects/MVKSync.h
+MoltenVK/GPUObjects/MVKVulkanAPIObject.h
+MoltenVK/Layers/MVKExtensions.def
+MoltenVK/Layers/MVKExtensions.h
+MoltenVK/Layers/MVKLayers.h
+MoltenVK/OS/CAMetalLayer+MoltenVK.h
+MoltenVK/OS/MTLRenderPassDescriptor+MoltenVK.h
+MoltenVK/OS/MTLRenderPipelineDescriptor+MoltenVK.h
+MoltenVK/OS/MTLSamplerDescriptor+MoltenVK.h
+MoltenVK/OS/MTLTextureDescriptor+MoltenVK.h
+MoltenVK/OS/MVKGPUCapture.h
+MoltenVK/OS/NSString+MoltenVK.h
+MoltenVK/Utility/MVKBaseObject.h
+MoltenVK/Utility/MVKBlockObserver.h
+MoltenVK/Utility/MVKCodec.h
+MoltenVK/Utility/MVKEnvironment.h
+MoltenVK/Utility/MVKFoundation.h
+MoltenVK/Utility/MVKObjectPool.h
+MoltenVK/Utility/MVKVector.h
+MoltenVK/Utility/MVKVectorAllocator.h
+MoltenVK/Utility/MVKWatermark.h
+MoltenVK/Utility/MVKWatermarkShaderSource.h
+MoltenVK/Utility/MVKWatermarkTextureContent.h
+MoltenVK/Vulkan/mvk_datatypes.hpp
+)
+
+set( MOLTEN_VK_I_OS_PRIVATE_HEADERS
+)
+
+set( MOLTEN_VK_I_OS_SOURCES
+../Common/MVKOSExtensions.mm
+MoltenVK/Commands/MVKCmdDebug.mm
+MoltenVK/Commands/MVKCmdDispatch.mm
+MoltenVK/Commands/MVKCmdDraw.mm
+MoltenVK/Commands/MVKCmdPipeline.mm
+MoltenVK/Commands/MVKCmdQueries.mm
+MoltenVK/Commands/MVKCmdRenderPass.mm
+MoltenVK/Commands/MVKCmdTransfer.mm
+MoltenVK/Commands/MVKCommand.mm
+MoltenVK/Commands/MVKCommandBuffer.mm
+MoltenVK/Commands/MVKCommandEncoderState.mm
+MoltenVK/Commands/MVKCommandEncodingPool.mm
+MoltenVK/Commands/MVKCommandPool.mm
+MoltenVK/Commands/MVKCommandResourceFactory.mm
+MoltenVK/Commands/MVKMTLBufferAllocation.mm
+MoltenVK/GPUObjects/MVKBuffer.mm
+MoltenVK/GPUObjects/MVKDescriptorSet.mm
+MoltenVK/GPUObjects/MVKDevice.mm
+MoltenVK/GPUObjects/MVKDeviceMemory.mm
+MoltenVK/GPUObjects/MVKFramebuffer.mm
+MoltenVK/GPUObjects/MVKImage.mm
+MoltenVK/GPUObjects/MVKInstance.mm
+MoltenVK/GPUObjects/MVKPipeline.mm
+MoltenVK/GPUObjects/MVKQueryPool.mm
+MoltenVK/GPUObjects/MVKQueue.mm
+MoltenVK/GPUObjects/MVKRenderPass.mm
+MoltenVK/GPUObjects/MVKResource.mm
+MoltenVK/GPUObjects/MVKShaderModule.mm
+MoltenVK/GPUObjects/MVKSurface.mm
+MoltenVK/GPUObjects/MVKSwapchain.mm
+MoltenVK/GPUObjects/MVKSync.mm
+MoltenVK/GPUObjects/MVKVulkanAPIObject.mm
+MoltenVK/Layers/MVKExtensions.mm
+MoltenVK/Layers/MVKLayers.mm
+MoltenVK/OS/CAMetalLayer+MoltenVK.m
+MoltenVK/OS/MTLRenderPassDescriptor+MoltenVK.m
+MoltenVK/OS/MTLRenderPipelineDescriptor+MoltenVK.m
+MoltenVK/OS/MTLSamplerDescriptor+MoltenVK.m
+MoltenVK/OS/MTLTextureDescriptor+MoltenVK.m
+MoltenVK/OS/MVKGPUCapture.mm
+MoltenVK/OS/NSString+MoltenVK.mm
+MoltenVK/Utility/MVKBaseObject.mm
+MoltenVK/Utility/MVKBlockObserver.m
+MoltenVK/Utility/MVKCodec.cpp
+MoltenVK/Utility/MVKFoundation.cpp
+MoltenVK/Utility/MVKWatermark.mm
+MoltenVK/Vulkan/mvk_datatypes.mm
+MoltenVK/Vulkan/vk_mvk_moltenvk.mm
+MoltenVK/Vulkan/vulkan.mm
+)
+
+
+##
+## MoltenVK-macOS Files
+##
+
+set( MOLTEN_VK_MAC_OS_INCLUDE_DIRS
+../Common
+MoltenVK/API
+MoltenVK/Commands
+MoltenVK/GPUObjects
+MoltenVK/Layers
+MoltenVK/OS
+MoltenVK/Utility
+MoltenVK/Vulkan
+)
+
+set( MOLTEN_VK_MAC_OS_PUBLIC_HEADERS
+)
+
+set( MOLTEN_VK_MAC_OS_PROJECT_HEADERS
+../Common/MVKCommonEnvironment.h
+../Common/MVKLogging.h
+../Common/MVKOSExtensions.h
+../Common/MVKStrings.h
+MoltenVK/API/mvk_datatypes.h
+MoltenVK/API/mvk_vulkan.h
+MoltenVK/API/vk_mvk_moltenvk.h
+MoltenVK/Commands/MVKCmdDebug.h
+MoltenVK/Commands/MVKCmdDraw.h
+MoltenVK/Commands/MVKCmdPipeline.h
+MoltenVK/Commands/MVKCmdQueries.h
+MoltenVK/Commands/MVKCmdRenderPass.h
+MoltenVK/Commands/MVKCmdTransfer.h
+MoltenVK/Commands/MVKCommand.h
+MoltenVK/Commands/MVKCommandBuffer.h
+MoltenVK/Commands/MVKCommandEncoderState.h
+MoltenVK/Commands/MVKCommandEncodingPool.h
+MoltenVK/Commands/MVKCommandPipelineStateFactoryShaderSource.h
+MoltenVK/Commands/MVKCommandPool.h
+MoltenVK/Commands/MVKCommandResourceFactory.h
+MoltenVK/Commands/MVKMTLBufferAllocation.h
+MoltenVK/Commands/MVKMTLResourceBindings.h
+MoltenVK/GPUObjects/MVKBuffer.h
+MoltenVK/GPUObjects/MVKDescriptorSet.h
+MoltenVK/GPUObjects/MVKDevice.h
+MoltenVK/GPUObjects/MVKDeviceMemory.h
+MoltenVK/GPUObjects/MVKFramebuffer.h
+MoltenVK/GPUObjects/MVKImage.h
+MoltenVK/GPUObjects/MVKInstance.h
+MoltenVK/GPUObjects/MVKPipeline.h
+MoltenVK/GPUObjects/MVKQueryPool.h
+MoltenVK/GPUObjects/MVKQueue.h
+MoltenVK/GPUObjects/MVKRenderPass.h
+MoltenVK/GPUObjects/MVKResource.h
+MoltenVK/GPUObjects/MVKShaderModule.h
+MoltenVK/GPUObjects/MVKSurface.h
+MoltenVK/GPUObjects/MVKSwapchain.h
+MoltenVK/GPUObjects/MVKSync.h
+MoltenVK/GPUObjects/MVKVulkanAPIObject.h
+MoltenVK/Layers/MVKExtensions.def
+MoltenVK/Layers/MVKExtensions.h
+MoltenVK/Layers/MVKLayers.h
+MoltenVK/OS/CAMetalLayer+MoltenVK.h
+MoltenVK/OS/MTLRenderPassDescriptor+MoltenVK.h
+MoltenVK/OS/MTLRenderPipelineDescriptor+MoltenVK.h
+MoltenVK/OS/MTLSamplerDescriptor+MoltenVK.h
+MoltenVK/OS/MTLTextureDescriptor+MoltenVK.h
+MoltenVK/OS/MVKGPUCapture.h
+MoltenVK/OS/NSString+MoltenVK.h
+MoltenVK/Utility/MVKBaseObject.h
+MoltenVK/Utility/MVKBlockObserver.h
+MoltenVK/Utility/MVKCodec.h
+MoltenVK/Utility/MVKEnvironment.h
+MoltenVK/Utility/MVKFoundation.h
+MoltenVK/Utility/MVKObjectPool.h
+MoltenVK/Utility/MVKVector.h
+MoltenVK/Utility/MVKVectorAllocator.h
+MoltenVK/Utility/MVKWatermark.h
+MoltenVK/Utility/MVKWatermarkShaderSource.h
+MoltenVK/Utility/MVKWatermarkTextureContent.h
+MoltenVK/Vulkan/mvk_datatypes.hpp
+)
+
+set( MOLTEN_VK_MAC_OS_PRIVATE_HEADERS
+)
+
+set( MOLTEN_VK_MAC_OS_SOURCES
+../Common/MVKOSExtensions.mm
+MoltenVK/Commands/MVKCmdDebug.mm
+MoltenVK/Commands/MVKCmdDispatch.mm
+MoltenVK/Commands/MVKCmdDraw.mm
+MoltenVK/Commands/MVKCmdPipeline.mm
+MoltenVK/Commands/MVKCmdQueries.mm
+MoltenVK/Commands/MVKCmdRenderPass.mm
+MoltenVK/Commands/MVKCmdTransfer.mm
+MoltenVK/Commands/MVKCommand.mm
+MoltenVK/Commands/MVKCommandBuffer.mm
+MoltenVK/Commands/MVKCommandEncoderState.mm
+MoltenVK/Commands/MVKCommandEncodingPool.mm
+MoltenVK/Commands/MVKCommandPool.mm
+MoltenVK/Commands/MVKCommandResourceFactory.mm
+MoltenVK/Commands/MVKMTLBufferAllocation.mm
+MoltenVK/GPUObjects/MVKBuffer.mm
+MoltenVK/GPUObjects/MVKDescriptorSet.mm
+MoltenVK/GPUObjects/MVKDevice.mm
+MoltenVK/GPUObjects/MVKDeviceMemory.mm
+MoltenVK/GPUObjects/MVKFramebuffer.mm
+MoltenVK/GPUObjects/MVKImage.mm
+MoltenVK/GPUObjects/MVKInstance.mm
+MoltenVK/GPUObjects/MVKPipeline.mm
+MoltenVK/GPUObjects/MVKQueryPool.mm
+MoltenVK/GPUObjects/MVKQueue.mm
+MoltenVK/GPUObjects/MVKRenderPass.mm
+MoltenVK/GPUObjects/MVKResource.mm
+MoltenVK/GPUObjects/MVKShaderModule.mm
+MoltenVK/GPUObjects/MVKSurface.mm
+MoltenVK/GPUObjects/MVKSwapchain.mm
+MoltenVK/GPUObjects/MVKSync.mm
+MoltenVK/GPUObjects/MVKVulkanAPIObject.mm
+MoltenVK/Layers/MVKExtensions.mm
+MoltenVK/Layers/MVKLayers.mm
+MoltenVK/OS/CAMetalLayer+MoltenVK.m
+MoltenVK/OS/MTLRenderPassDescriptor+MoltenVK.m
+MoltenVK/OS/MTLRenderPipelineDescriptor+MoltenVK.m
+MoltenVK/OS/MTLSamplerDescriptor+MoltenVK.m
+MoltenVK/OS/MTLTextureDescriptor+MoltenVK.m
+MoltenVK/OS/MVKGPUCapture.mm
+MoltenVK/OS/NSString+MoltenVK.mm
+MoltenVK/Utility/MVKBaseObject.mm
+MoltenVK/Utility/MVKBlockObserver.m
+MoltenVK/Utility/MVKCodec.cpp
+MoltenVK/Utility/MVKFoundation.cpp
+MoltenVK/Utility/MVKWatermark.mm
+MoltenVK/Vulkan/mvk_datatypes.mm
+MoltenVK/Vulkan/vk_mvk_moltenvk.mm
+MoltenVK/Vulkan/vulkan.mm
+)
diff --git a/MoltenVKPackaging.CMakeList.txt b/MoltenVKPackaging.CMakeList.txt
new file mode 100644
index 0000000..d66b087
--- /dev/null
+++ b/MoltenVKPackaging.CMakeList.txt
@@ -0,0 +1,184 @@
+# Generated on 2019-11-10 1:31:50 by version 0.9.0 of mulle-xcode-to-cmake
+# Command line:
+#    mulle-xcode-to-cmake -2 -d export MoltenVKPackaging.xcodeproj
+
+
+cmake_minimum_required (VERSION 3.4)
+project( MoltenVKPackaging C)
+
+# ###
+# Build for mulle-objc (https://mulle-objc.github.io/):
+#
+#    mulle-sde init -m foundation/objc-porter executable
+#    mulle-sde craft
+#
+# [mulle-clang >= 8.0.0.0 and mulle-objc >= 0.15 required]
+#
+
+if( NOT DEPENDENCY_DIR)
+   set( DEPENDENCY_DIR "$ENV{DEPENDENCY_DIR}")
+endif()
+if( NOT DEPENDENCY_DIR)
+   set( DEPENDENCY_DIR "${PROJECT_SOURCE_DIR}/dependency")
+endif()
+if( EXISTS "${DEPENDENCY_DIR}")
+   if( NOT ADDICTION_DIR)
+      get_filename_component( ADDICTION_DIR "${DEPENDENCY_DIR}" DIRECTORY)
+      set( ADDICTION_DIR "${ADDICTION_DIR}/addiction")
+   endif()
+   set( CMAKE_FIND_FRAMEWORK "LAST")
+   include_directories( BEFORE SYSTEM
+      ${DEPENDENCY_DIR}/include
+      ${ADDICTION_DIR}/include
+   )
+   set( CMAKE_FRAMEWORK_PATH
+      ${DEPENDENCY_DIR}/Frameworks
+      ${ADDICTION_DIR}/Frameworks
+      ${CMAKE_FRAMEWORK_PATH}
+   )
+   set( CMAKE_LIBRARY_PATH
+      ${DEPENDENCY_DIR}/lib
+      ${ADDICTION_DIR}/lib
+      ${CMAKE_LIBRARY_PATH}
+   )
+   set( SKIP_FIND_FOUNDATION_LIBRARY ON)
+   execute_process( COMMAND mulle-sde stash-dir
+                    OUTPUT_VARIABLE MULLE_SOURCETREE_STASH_DIR)
+   string( STRIP "${MULLE_SOURCETREE_STASH_DIR}" MULLE_SOURCETREE_STASH_DIR)
+   execute_process( COMMAND mulle-sde linkorder --stash-dir "${MULLE_SOURCETREE_STASH_DIR}" --startup --simplify --output-format cmake
+                    WORKING_DIRECTORY "${PROJECT_SOURCE_DIR}"
+                    OUTPUT_VARIABLE MULLE_SDE_LINKER_FLAGS
+                    RESULT_VARIABLE RVAL)
+   if( NOT ${RVAL} EQUAL 0)
+      message( FATAL_ERROR "Failed to procure linkorder from mulle-sde. Old version ?")
+   endif()
+   message( STATUS "MULLE_SDE_LINKER_FLAGS=\"${MULLE_SDE_LINKER_FLAGS}\"")
+else()
+   message( STATUS "Not a mulle-sde build (\"${DEPENDENCY_DIR}\" does not exist)")
+endif()
+
+
+#
+# Platform specific definitions
+#
+
+if( APPLE)
+   # # CMAKE_OSX_SYSROOT must be set for CMAKE_OSX_DEPLOYMENT_TARGET (cmake bug)
+   # if( NOT CMAKE_OSX_SYSROOT)
+   #    set( CMAKE_OSX_SYSROOT "/" CACHE STRING "SDK for OSX" FORCE)   # means current OS X
+   # endif()
+   #
+   # # baseline set to 10.6 for rpath
+   # if( NOT CMAKE_OSX_DEPLOYMENT_TARGET)
+   #   set(CMAKE_OSX_DEPLOYMENT_TARGET "10.6" CACHE STRING "Deployment target for OSX" FORCE)
+   # endif()
+
+   set( CMAKE_POSITION_INDEPENDENT_CODE FALSE)
+   set( CMAKE_INSTALL_RPATH "@rpath/../lib")
+
+   set( BEGIN_ALL_LOAD "-all_load")
+   set( END_ALL_LOAD)
+else()
+   set( CMAKE_POSITION_INDEPENDENT_CODE TRUE)
+
+   if( WIN32)
+   # windows
+   else()
+   # linux / gcc
+      set( BEGIN_ALL_LOAD "-Wl,--whole-archive")
+      set( END_ALL_LOAD "-Wl,--no-whole-archive")
+      set( CMAKE_INSTALL_RPATH "\$ORIGIN/../lib")
+   endif()
+endif()
+
+##
+## Produce MoltenVKPackaging.CMakeSourcesAndHeaders.txt with:
+##   mulle-xcode-to-cmake -t 'MoltenVK' -t 'MoltenVK-iOS' -t 'MoltenVK-macOS' sexport > MoltenVKPackaging.CMakeSourcesAndHeaders.txt
+##
+
+include( MoltenVKPackaging.CMakeSourcesAndHeaders.txt)
+
+add_library( MoltenVK STATIC
+${MOLTEN_VK_SOURCES}
+${MOLTEN_VK_PUBLIC_HEADERS}
+${MOLTEN_VK_PROJECT_HEADERS}
+${MOLTEN_VK_PRIVATE_HEADERS}
+${MOLTEN_VK_RESOURCES}
+)
+
+add_dependencies( MoltenVK MoltenVK-iOS)
+
+add_dependencies( MoltenVK MoltenVK-macOS)
+
+install( TARGETS MoltenVK DESTINATION "lib")
+install( FILES ${MOLTEN_VK_PUBLIC_HEADERS} DESTINATION "include/MoltenVK")
+
+
+##
+## MoltenVK_shared
+##
+
+add_library( MoltenVK_shared SHARED
+${MOLTEN_VK_SOURCES}
+)
+
+set_target_properties( MoltenVK_shared
+   PROPERTIES
+   OUTPUT_NAME MoltenVK)
+)
+
+install( TARGETS MoltenVK_shared DESTINATION "lib")
+
+add_library( MoltenVK-iOS STATIC
+${MOLTEN_VK_I_OS_SOURCES}
+${MOLTEN_VK_I_OS_PUBLIC_HEADERS}
+${MOLTEN_VK_I_OS_PROJECT_HEADERS}
+${MOLTEN_VK_I_OS_PRIVATE_HEADERS}
+${MOLTEN_VK_I_OS_RESOURCES}
+)
+
+install( TARGETS MoltenVK-iOS DESTINATION "lib")
+install( FILES ${MOLTEN_VK_I_OS_PUBLIC_HEADERS} DESTINATION "include/MoltenVK-iOS")
+
+
+##
+## MoltenVK-iOS_shared
+##
+
+add_library( MoltenVK-iOS_shared SHARED
+${MOLTEN_VK_I_OS_SOURCES}
+)
+
+set_target_properties( MoltenVK-iOS_shared
+   PROPERTIES
+   OUTPUT_NAME MoltenVK-iOS)
+)
+
+install( TARGETS MoltenVK-iOS_shared DESTINATION "lib")
+
+add_library( MoltenVK-macOS STATIC
+${MOLTEN_VK_MAC_OS_SOURCES}
+${MOLTEN_VK_MAC_OS_PUBLIC_HEADERS}
+${MOLTEN_VK_MAC_OS_PROJECT_HEADERS}
+${MOLTEN_VK_MAC_OS_PRIVATE_HEADERS}
+${MOLTEN_VK_MAC_OS_RESOURCES}
+)
+
+install( TARGETS MoltenVK-macOS DESTINATION "lib")
+install( FILES ${MOLTEN_VK_MAC_OS_PUBLIC_HEADERS} DESTINATION "include/MoltenVK-macOS")
+
+
+##
+## MoltenVK-macOS_shared
+##
+
+add_library( MoltenVK-macOS_shared SHARED
+${MOLTEN_VK_MAC_OS_SOURCES}
+)
+
+set_target_properties( MoltenVK-macOS_shared
+   PROPERTIES
+   OUTPUT_NAME MoltenVK-macOS)
+)
+
+install( TARGETS MoltenVK-macOS_shared DESTINATION "lib")
diff --git a/MoltenVKPackaging.CMakeLists.txt b/MoltenVKPackaging.CMakeLists.txt
new file mode 100644
index 0000000..715b6c8
--- /dev/null
+++ b/MoltenVKPackaging.CMakeLists.txt
@@ -0,0 +1,184 @@
+# Generated on 2019-11-10 1:12:03 by version 0.9.0 of mulle-xcode-to-cmake
+# Command line:
+#    mulle-xcode-to-cmake -2 -d export MoltenVKPackaging.xcodeproj
+
+
+cmake_minimum_required (VERSION 3.4)
+project( MoltenVKPackaging C)
+
+# ###
+# Build for mulle-objc (https://mulle-objc.github.io/):
+#
+#    mulle-sde init -m foundation/objc-porter executable
+#    mulle-sde craft
+#
+# [mulle-clang >= 8.0.0.0 and mulle-objc >= 0.15 required]
+#
+
+if( NOT DEPENDENCY_DIR)
+   set( DEPENDENCY_DIR "$ENV{DEPENDENCY_DIR}")
+endif()
+if( NOT DEPENDENCY_DIR)
+   set( DEPENDENCY_DIR "${PROJECT_SOURCE_DIR}/dependency")
+endif()
+if( EXISTS "${DEPENDENCY_DIR}")
+   if( NOT ADDICTION_DIR)
+      get_filename_component( ADDICTION_DIR "${DEPENDENCY_DIR}" DIRECTORY)
+      set( ADDICTION_DIR "${ADDICTION_DIR}/addiction")
+   endif()
+   set( CMAKE_FIND_FRAMEWORK "LAST")
+   include_directories( BEFORE SYSTEM
+      ${DEPENDENCY_DIR}/include
+      ${ADDICTION_DIR}/include
+   )
+   set( CMAKE_FRAMEWORK_PATH
+      ${DEPENDENCY_DIR}/Frameworks
+      ${ADDICTION_DIR}/Frameworks
+      ${CMAKE_FRAMEWORK_PATH}
+   )
+   set( CMAKE_LIBRARY_PATH
+      ${DEPENDENCY_DIR}/lib
+      ${ADDICTION_DIR}/lib
+      ${CMAKE_LIBRARY_PATH}
+   )
+   set( SKIP_FIND_FOUNDATION_LIBRARY ON)
+   execute_process( COMMAND mulle-sde stash-dir
+                    OUTPUT_VARIABLE MULLE_SOURCETREE_STASH_DIR)
+   string( STRIP "${MULLE_SOURCETREE_STASH_DIR}" MULLE_SOURCETREE_STASH_DIR)
+   execute_process( COMMAND mulle-sde linkorder --stash-dir "${MULLE_SOURCETREE_STASH_DIR}" --startup --simplify --output-format cmake
+                    WORKING_DIRECTORY "${PROJECT_SOURCE_DIR}"
+                    OUTPUT_VARIABLE MULLE_SDE_LINKER_FLAGS
+                    RESULT_VARIABLE RVAL)
+   if( NOT ${RVAL} EQUAL 0)
+      message( FATAL_ERROR "Failed to procure linkorder from mulle-sde. Old version ?")
+   endif()
+   message( STATUS "MULLE_SDE_LINKER_FLAGS=\"${MULLE_SDE_LINKER_FLAGS}\"")
+else()
+   message( STATUS "Not a mulle-sde build (\"${DEPENDENCY_DIR}\" does not exist)")
+endif()
+
+
+#
+# Platform specific definitions
+#
+
+if( APPLE)
+   # # CMAKE_OSX_SYSROOT must be set for CMAKE_OSX_DEPLOYMENT_TARGET (cmake bug)
+   # if( NOT CMAKE_OSX_SYSROOT)
+   #    set( CMAKE_OSX_SYSROOT "/" CACHE STRING "SDK for OSX" FORCE)   # means current OS X
+   # endif()
+   #
+   # # baseline set to 10.6 for rpath
+   # if( NOT CMAKE_OSX_DEPLOYMENT_TARGET)
+   #   set(CMAKE_OSX_DEPLOYMENT_TARGET "10.6" CACHE STRING "Deployment target for OSX" FORCE)
+   # endif()
+
+   set( CMAKE_POSITION_INDEPENDENT_CODE FALSE)
+   set( CMAKE_INSTALL_RPATH "@rpath/../lib")
+
+   set( BEGIN_ALL_LOAD "-all_load")
+   set( END_ALL_LOAD)
+else()
+   set( CMAKE_POSITION_INDEPENDENT_CODE TRUE)
+
+   if( WIN32)
+   # windows
+   else()
+   # linux / gcc
+      set( BEGIN_ALL_LOAD "-Wl,--whole-archive")
+      set( END_ALL_LOAD "-Wl,--no-whole-archive")
+      set( CMAKE_INSTALL_RPATH "\$ORIGIN/../lib")
+   endif()
+endif()
+
+##
+## Produce CMakeSourcesAndHeaders.txt with:
+##   mulle-xcode-to-cmake -t 'MoltenVK' -t 'MoltenVK-iOS' -t 'MoltenVK-macOS' sexport > CMakeSourcesAndHeaders.txt
+##
+
+include( CMakeSourcesAndHeaders.txt)
+
+add_library( MoltenVK STATIC
+${MOLTEN_VK_SOURCES}
+${MOLTEN_VK_PUBLIC_HEADERS}
+${MOLTEN_VK_PROJECT_HEADERS}
+${MOLTEN_VK_PRIVATE_HEADERS}
+${MOLTEN_VK_RESOURCES}
+)
+
+add_dependencies( MoltenVK MoltenVK-iOS)
+
+add_dependencies( MoltenVK MoltenVK-macOS)
+
+install( TARGETS MoltenVK DESTINATION "lib")
+install( FILES ${MOLTEN_VK_PUBLIC_HEADERS} DESTINATION "include/MoltenVK")
+
+
+##
+## MoltenVK_shared
+##
+
+add_library( MoltenVK_shared SHARED
+${MOLTEN_VK_SOURCES}
+)
+
+set_target_properties( MoltenVK_shared
+   PROPERTIES
+   OUTPUT_NAME MoltenVK)
+)
+
+install( TARGETS MoltenVK_shared DESTINATION "lib")
+
+add_library( MoltenVK-iOS STATIC
+${MOLTEN_VK_I_OS_SOURCES}
+${MOLTEN_VK_I_OS_PUBLIC_HEADERS}
+${MOLTEN_VK_I_OS_PROJECT_HEADERS}
+${MOLTEN_VK_I_OS_PRIVATE_HEADERS}
+${MOLTEN_VK_I_OS_RESOURCES}
+)
+
+install( TARGETS MoltenVK-iOS DESTINATION "lib")
+install( FILES ${MOLTEN_VK_I_OS_PUBLIC_HEADERS} DESTINATION "include/MoltenVK-iOS")
+
+
+##
+## MoltenVK-iOS_shared
+##
+
+add_library( MoltenVK-iOS_shared SHARED
+${MOLTEN_VK_I_OS_SOURCES}
+)
+
+set_target_properties( MoltenVK-iOS_shared
+   PROPERTIES
+   OUTPUT_NAME MoltenVK-iOS)
+)
+
+install( TARGETS MoltenVK-iOS_shared DESTINATION "lib")
+
+add_library( MoltenVK-macOS STATIC
+${MOLTEN_VK_MAC_OS_SOURCES}
+${MOLTEN_VK_MAC_OS_PUBLIC_HEADERS}
+${MOLTEN_VK_MAC_OS_PROJECT_HEADERS}
+${MOLTEN_VK_MAC_OS_PRIVATE_HEADERS}
+${MOLTEN_VK_MAC_OS_RESOURCES}
+)
+
+install( TARGETS MoltenVK-macOS DESTINATION "lib")
+install( FILES ${MOLTEN_VK_MAC_OS_PUBLIC_HEADERS} DESTINATION "include/MoltenVK-macOS")
+
+
+##
+## MoltenVK-macOS_shared
+##
+
+add_library( MoltenVK-macOS_shared SHARED
+${MOLTEN_VK_MAC_OS_SOURCES}
+)
+
+set_target_properties( MoltenVK-macOS_shared
+   PROPERTIES
+   OUTPUT_NAME MoltenVK-macOS)
+)
+
+install( TARGETS MoltenVK-macOS_shared DESTINATION "lib")
diff --git a/MoltenVKPackaging.CMakeSourcesAndHeaders.txt b/MoltenVKPackaging.CMakeSourcesAndHeaders.txt
new file mode 100644
index 0000000..aaa60c5
--- /dev/null
+++ b/MoltenVKPackaging.CMakeSourcesAndHeaders.txt
@@ -0,0 +1,19 @@
+# Generated on 2019-11-10 1:31:50 by version 0.9.0 of mulle-xcode-to-cmake
+# Command line:
+#    mulle-xcode-to-cmake -2 -d sexport MoltenVKPackaging.xcodeproj
+
+
+
+##
+## MoltenVK Files
+##
+
+
+##
+## MoltenVK-iOS Files
+##
+
+
+##
+## MoltenVK-macOS Files
+##
diff --git a/MoltenVKShaderConverter/CMakeLists.txt b/MoltenVKShaderConverter/CMakeLists.txt
new file mode 100644
index 0000000..031cc54
--- /dev/null
+++ b/MoltenVKShaderConverter/CMakeLists.txt
@@ -0,0 +1,483 @@
+# Generated on 2019-11-10 1:31:51 by version 0.9.0 of mulle-xcode-to-cmake
+# Command line:
+#    mulle-xcode-to-cmake -2 -d export MoltenVKShaderConverter.xcodeproj
+
+
+cmake_minimum_required (VERSION 3.4)
+project( MoltenVKShaderConverter C)
+
+# ###
+# Build for mulle-objc (https://mulle-objc.github.io/):
+#
+#    mulle-sde init -m foundation/objc-porter executable
+#    mulle-sde craft
+#
+# [mulle-clang >= 8.0.0.0 and mulle-objc >= 0.15 required]
+#
+
+if( NOT DEPENDENCY_DIR)
+   set( DEPENDENCY_DIR "$ENV{DEPENDENCY_DIR}")
+endif()
+if( NOT DEPENDENCY_DIR)
+   set( DEPENDENCY_DIR "${PROJECT_SOURCE_DIR}/dependency")
+endif()
+if( EXISTS "${DEPENDENCY_DIR}")
+   if( NOT ADDICTION_DIR)
+      get_filename_component( ADDICTION_DIR "${DEPENDENCY_DIR}" DIRECTORY)
+      set( ADDICTION_DIR "${ADDICTION_DIR}/addiction")
+   endif()
+   set( CMAKE_FIND_FRAMEWORK "LAST")
+   include_directories( BEFORE SYSTEM
+      ${DEPENDENCY_DIR}/include
+      ${ADDICTION_DIR}/include
+   )
+   set( CMAKE_FRAMEWORK_PATH
+      ${DEPENDENCY_DIR}/Frameworks
+      ${ADDICTION_DIR}/Frameworks
+      ${CMAKE_FRAMEWORK_PATH}
+   )
+   set( CMAKE_LIBRARY_PATH
+      ${DEPENDENCY_DIR}/lib
+      ${ADDICTION_DIR}/lib
+      ${CMAKE_LIBRARY_PATH}
+   )
+   set( SKIP_FIND_FOUNDATION_LIBRARY ON)
+   execute_process( COMMAND mulle-sde stash-dir
+                    OUTPUT_VARIABLE MULLE_SOURCETREE_STASH_DIR)
+   string( STRIP "${MULLE_SOURCETREE_STASH_DIR}" MULLE_SOURCETREE_STASH_DIR)
+   execute_process( COMMAND mulle-sde linkorder --stash-dir "${MULLE_SOURCETREE_STASH_DIR}" --startup --simplify --output-format cmake
+                    WORKING_DIRECTORY "${PROJECT_SOURCE_DIR}"
+                    OUTPUT_VARIABLE MULLE_SDE_LINKER_FLAGS
+                    RESULT_VARIABLE RVAL)
+   if( NOT ${RVAL} EQUAL 0)
+      message( FATAL_ERROR "Failed to procure linkorder from mulle-sde. Old version ?")
+   endif()
+   message( STATUS "MULLE_SDE_LINKER_FLAGS=\"${MULLE_SDE_LINKER_FLAGS}\"")
+else()
+   message( STATUS "Not a mulle-sde build (\"${DEPENDENCY_DIR}\" does not exist)")
+endif()
+
+
+#
+# Platform specific definitions
+#
+
+if( APPLE)
+   # # CMAKE_OSX_SYSROOT must be set for CMAKE_OSX_DEPLOYMENT_TARGET (cmake bug)
+   # if( NOT CMAKE_OSX_SYSROOT)
+   #    set( CMAKE_OSX_SYSROOT "/" CACHE STRING "SDK for OSX" FORCE)   # means current OS X
+   # endif()
+   #
+   # # baseline set to 10.6 for rpath
+   # if( NOT CMAKE_OSX_DEPLOYMENT_TARGET)
+   #   set(CMAKE_OSX_DEPLOYMENT_TARGET "10.6" CACHE STRING "Deployment target for OSX" FORCE)
+   # endif()
+
+   set( CMAKE_POSITION_INDEPENDENT_CODE FALSE)
+   set( CMAKE_INSTALL_RPATH "@rpath/../lib")
+
+   set( BEGIN_ALL_LOAD "-all_load")
+   set( END_ALL_LOAD)
+else()
+   set( CMAKE_POSITION_INDEPENDENT_CODE TRUE)
+
+   if( WIN32)
+   # windows
+   else()
+   # linux / gcc
+      set( BEGIN_ALL_LOAD "-Wl,--whole-archive")
+      set( END_ALL_LOAD "-Wl,--no-whole-archive")
+      set( CMAKE_INSTALL_RPATH "\$ORIGIN/../lib")
+   endif()
+endif()
+
+##
+## Produce CMakeSourcesAndHeaders.txt with:
+##   mulle-xcode-to-cmake -t 'MoltenVKShaderConverter' -t 'MoltenVKGLSLToSPIRVConverter-iOS' -t 'MoltenVKGLSLToSPIRVConverter-macOS' -t 'MoltenVKSPIRVToMSLConverter-iOS' -t 'MoltenVKSPIRVToMSLConverter-macOS' sexport > CMakeSourcesAndHeaders.txt
+##
+
+include( CMakeSourcesAndHeaders.txt)
+
+# uncomment this for mulle-objc to search libraries first
+# set( CMAKE_FIND_FRAMEWORK "LAST")
+
+if( NOT SKIP_FIND_MOLTEN_VKGLSLTO_SPIRVCONVERTER_LIBRARY)
+   find_library( MOLTEN_VKGLSLTO_SPIRVCONVERTER_LIBRARY MoltenVKGLSLToSPIRVConverter)
+   message( STATUS "MOLTEN_VKGLSLTO_SPIRVCONVERTER_LIBRARY is ${MOLTEN_VKGLSLTO_SPIRVCONVERTER_LIBRARY}")
+endif()
+if( NOT SKIP_FIND_MOLTEN_VKSPIRVTO_MSLCONVERTER_LIBRARY)
+   find_library( MOLTEN_VKSPIRVTO_MSLCONVERTER_LIBRARY MoltenVKSPIRVToMSLConverter)
+   message( STATUS "MOLTEN_VKSPIRVTO_MSLCONVERTER_LIBRARY is ${MOLTEN_VKSPIRVTO_MSLCONVERTER_LIBRARY}")
+endif()
+
+set( MOLTEN_VKSHADER_CONVERTER_STATIC_DEPENDENCIES
+${MOLTEN_VKGLSLTO_SPIRVCONVERTER_LIBRARY}
+${MOLTEN_VKSPIRVTO_MSLCONVERTER_LIBRARY}
+)
+
+if( NOT SKIP_FIND_FOUNDATION_LIBRARY)
+   find_library( FOUNDATION_LIBRARY Foundation)
+   message( STATUS "FOUNDATION_LIBRARY is ${FOUNDATION_LIBRARY}")
+endif()
+if( NOT SKIP_FIND_METAL_LIBRARY)
+   find_library( METAL_LIBRARY Metal)
+   message( STATUS "METAL_LIBRARY is ${METAL_LIBRARY}")
+endif()
+
+set( MOLTEN_VKSHADER_CONVERTER_DEPENDENCIES
+${FOUNDATION_LIBRARY}
+${METAL_LIBRARY}
+)
+
+# uncomment this for mulle-objc to search libraries first
+# set( CMAKE_FIND_FRAMEWORK "LAST")
+
+if( NOT SKIP_FIND_MOLTEN_VKGLSLTO_SPIRVCONVERTER_LIBRARY)
+   find_library( MOLTEN_VKGLSLTO_SPIRVCONVERTER_LIBRARY MoltenVKGLSLToSPIRVConverter)
+   message( STATUS "MOLTEN_VKGLSLTO_SPIRVCONVERTER_LIBRARY is ${MOLTEN_VKGLSLTO_SPIRVCONVERTER_LIBRARY}")
+endif()
+if( NOT SKIP_FIND_MOLTEN_VKSPIRVTO_MSLCONVERTER_LIBRARY)
+   find_library( MOLTEN_VKSPIRVTO_MSLCONVERTER_LIBRARY MoltenVKSPIRVToMSLConverter)
+   message( STATUS "MOLTEN_VKSPIRVTO_MSLCONVERTER_LIBRARY is ${MOLTEN_VKSPIRVTO_MSLCONVERTER_LIBRARY}")
+endif()
+if( NOT SKIP_FIND_SPIRVTOOLS_LIBRARY)
+   find_library( SPIRVTOOLS_LIBRARY SPIRVTools)
+   message( STATUS "SPIRVTOOLS_LIBRARY is ${SPIRVTOOLS_LIBRARY}")
+endif()
+if( NOT SKIP_FIND_GLSLANG_LIBRARY)
+   find_library( GLSLANG_LIBRARY glslang)
+   message( STATUS "GLSLANG_LIBRARY is ${GLSLANG_LIBRARY}")
+endif()
+
+set( MOLTEN_VKGLSLTO_SPIRVCONVERTER_I_OS_STATIC_DEPENDENCIES
+${GLSLANG_LIBRARY}
+${MOLTEN_VKGLSLTO_SPIRVCONVERTER_LIBRARY}
+${MOLTEN_VKSPIRVTO_MSLCONVERTER_LIBRARY}
+${SPIRVTOOLS_LIBRARY}
+)
+
+if( NOT SKIP_FIND_FOUNDATION_LIBRARY)
+   find_library( FOUNDATION_LIBRARY Foundation)
+   message( STATUS "FOUNDATION_LIBRARY is ${FOUNDATION_LIBRARY}")
+endif()
+if( NOT SKIP_FIND_METAL_LIBRARY)
+   find_library( METAL_LIBRARY Metal)
+   message( STATUS "METAL_LIBRARY is ${METAL_LIBRARY}")
+endif()
+
+set( MOLTEN_VKGLSLTO_SPIRVCONVERTER_I_OS_DEPENDENCIES
+${FOUNDATION_LIBRARY}
+${METAL_LIBRARY}
+)
+
+# uncomment this for mulle-objc to search libraries first
+# set( CMAKE_FIND_FRAMEWORK "LAST")
+
+if( NOT SKIP_FIND_MOLTEN_VKGLSLTO_SPIRVCONVERTER_LIBRARY)
+   find_library( MOLTEN_VKGLSLTO_SPIRVCONVERTER_LIBRARY MoltenVKGLSLToSPIRVConverter)
+   message( STATUS "MOLTEN_VKGLSLTO_SPIRVCONVERTER_LIBRARY is ${MOLTEN_VKGLSLTO_SPIRVCONVERTER_LIBRARY}")
+endif()
+if( NOT SKIP_FIND_MOLTEN_VKSPIRVTO_MSLCONVERTER_LIBRARY)
+   find_library( MOLTEN_VKSPIRVTO_MSLCONVERTER_LIBRARY MoltenVKSPIRVToMSLConverter)
+   message( STATUS "MOLTEN_VKSPIRVTO_MSLCONVERTER_LIBRARY is ${MOLTEN_VKSPIRVTO_MSLCONVERTER_LIBRARY}")
+endif()
+if( NOT SKIP_FIND_SPIRVTOOLS_LIBRARY)
+   find_library( SPIRVTOOLS_LIBRARY SPIRVTools)
+   message( STATUS "SPIRVTOOLS_LIBRARY is ${SPIRVTOOLS_LIBRARY}")
+endif()
+if( NOT SKIP_FIND_GLSLANG_LIBRARY)
+   find_library( GLSLANG_LIBRARY glslang)
+   message( STATUS "GLSLANG_LIBRARY is ${GLSLANG_LIBRARY}")
+endif()
+
+set( MOLTEN_VKGLSLTO_SPIRVCONVERTER_MAC_OS_STATIC_DEPENDENCIES
+${GLSLANG_LIBRARY}
+${MOLTEN_VKGLSLTO_SPIRVCONVERTER_LIBRARY}
+${MOLTEN_VKSPIRVTO_MSLCONVERTER_LIBRARY}
+${SPIRVTOOLS_LIBRARY}
+)
+
+if( NOT SKIP_FIND_FOUNDATION_LIBRARY)
+   find_library( FOUNDATION_LIBRARY Foundation)
+   message( STATUS "FOUNDATION_LIBRARY is ${FOUNDATION_LIBRARY}")
+endif()
+if( NOT SKIP_FIND_METAL_LIBRARY)
+   find_library( METAL_LIBRARY Metal)
+   message( STATUS "METAL_LIBRARY is ${METAL_LIBRARY}")
+endif()
+
+set( MOLTEN_VKGLSLTO_SPIRVCONVERTER_MAC_OS_DEPENDENCIES
+${FOUNDATION_LIBRARY}
+${METAL_LIBRARY}
+)
+
+# uncomment this for mulle-objc to search libraries first
+# set( CMAKE_FIND_FRAMEWORK "LAST")
+
+if( NOT SKIP_FIND_MOLTEN_VKGLSLTO_SPIRVCONVERTER_LIBRARY)
+   find_library( MOLTEN_VKGLSLTO_SPIRVCONVERTER_LIBRARY MoltenVKGLSLToSPIRVConverter)
+   message( STATUS "MOLTEN_VKGLSLTO_SPIRVCONVERTER_LIBRARY is ${MOLTEN_VKGLSLTO_SPIRVCONVERTER_LIBRARY}")
+endif()
+if( NOT SKIP_FIND_MOLTEN_VKSPIRVTO_MSLCONVERTER_LIBRARY)
+   find_library( MOLTEN_VKSPIRVTO_MSLCONVERTER_LIBRARY MoltenVKSPIRVToMSLConverter)
+   message( STATUS "MOLTEN_VKSPIRVTO_MSLCONVERTER_LIBRARY is ${MOLTEN_VKSPIRVTO_MSLCONVERTER_LIBRARY}")
+endif()
+if( NOT SKIP_FIND_SPIRVCROSS_LIBRARY)
+   find_library( SPIRVCROSS_LIBRARY SPIRVCross)
+   message( STATUS "SPIRVCROSS_LIBRARY is ${SPIRVCROSS_LIBRARY}")
+endif()
+if( NOT SKIP_FIND_SPIRVTOOLS_LIBRARY)
+   find_library( SPIRVTOOLS_LIBRARY SPIRVTools)
+   message( STATUS "SPIRVTOOLS_LIBRARY is ${SPIRVTOOLS_LIBRARY}")
+endif()
+if( NOT SKIP_FIND_GLSLANG_LIBRARY)
+   find_library( GLSLANG_LIBRARY glslang)
+   message( STATUS "GLSLANG_LIBRARY is ${GLSLANG_LIBRARY}")
+endif()
+
+set( MOLTEN_VKSPIRVTO_MSLCONVERTER_I_OS_STATIC_DEPENDENCIES
+${GLSLANG_LIBRARY}
+${MOLTEN_VKGLSLTO_SPIRVCONVERTER_LIBRARY}
+${MOLTEN_VKSPIRVTO_MSLCONVERTER_LIBRARY}
+${SPIRVCROSS_LIBRARY}
+${SPIRVTOOLS_LIBRARY}
+)
+
+if( NOT SKIP_FIND_FOUNDATION_LIBRARY)
+   find_library( FOUNDATION_LIBRARY Foundation)
+   message( STATUS "FOUNDATION_LIBRARY is ${FOUNDATION_LIBRARY}")
+endif()
+if( NOT SKIP_FIND_METAL_LIBRARY)
+   find_library( METAL_LIBRARY Metal)
+   message( STATUS "METAL_LIBRARY is ${METAL_LIBRARY}")
+endif()
+
+set( MOLTEN_VKSPIRVTO_MSLCONVERTER_I_OS_DEPENDENCIES
+${FOUNDATION_LIBRARY}
+${METAL_LIBRARY}
+)
+
+# uncomment this for mulle-objc to search libraries first
+# set( CMAKE_FIND_FRAMEWORK "LAST")
+
+if( NOT SKIP_FIND_MOLTEN_VKGLSLTO_SPIRVCONVERTER_LIBRARY)
+   find_library( MOLTEN_VKGLSLTO_SPIRVCONVERTER_LIBRARY MoltenVKGLSLToSPIRVConverter)
+   message( STATUS "MOLTEN_VKGLSLTO_SPIRVCONVERTER_LIBRARY is ${MOLTEN_VKGLSLTO_SPIRVCONVERTER_LIBRARY}")
+endif()
+if( NOT SKIP_FIND_MOLTEN_VKSPIRVTO_MSLCONVERTER_LIBRARY)
+   find_library( MOLTEN_VKSPIRVTO_MSLCONVERTER_LIBRARY MoltenVKSPIRVToMSLConverter)
+   message( STATUS "MOLTEN_VKSPIRVTO_MSLCONVERTER_LIBRARY is ${MOLTEN_VKSPIRVTO_MSLCONVERTER_LIBRARY}")
+endif()
+if( NOT SKIP_FIND_SPIRVCROSS_LIBRARY)
+   find_library( SPIRVCROSS_LIBRARY SPIRVCross)
+   message( STATUS "SPIRVCROSS_LIBRARY is ${SPIRVCROSS_LIBRARY}")
+endif()
+if( NOT SKIP_FIND_SPIRVTOOLS_LIBRARY)
+   find_library( SPIRVTOOLS_LIBRARY SPIRVTools)
+   message( STATUS "SPIRVTOOLS_LIBRARY is ${SPIRVTOOLS_LIBRARY}")
+endif()
+if( NOT SKIP_FIND_GLSLANG_LIBRARY)
+   find_library( GLSLANG_LIBRARY glslang)
+   message( STATUS "GLSLANG_LIBRARY is ${GLSLANG_LIBRARY}")
+endif()
+
+set( MOLTEN_VKSPIRVTO_MSLCONVERTER_MAC_OS_STATIC_DEPENDENCIES
+${GLSLANG_LIBRARY}
+${MOLTEN_VKGLSLTO_SPIRVCONVERTER_LIBRARY}
+${MOLTEN_VKSPIRVTO_MSLCONVERTER_LIBRARY}
+${SPIRVCROSS_LIBRARY}
+${SPIRVTOOLS_LIBRARY}
+)
+
+if( NOT SKIP_FIND_FOUNDATION_LIBRARY)
+   find_library( FOUNDATION_LIBRARY Foundation)
+   message( STATUS "FOUNDATION_LIBRARY is ${FOUNDATION_LIBRARY}")
+endif()
+if( NOT SKIP_FIND_METAL_LIBRARY)
+   find_library( METAL_LIBRARY Metal)
+   message( STATUS "METAL_LIBRARY is ${METAL_LIBRARY}")
+endif()
+
+set( MOLTEN_VKSPIRVTO_MSLCONVERTER_MAC_OS_DEPENDENCIES
+${FOUNDATION_LIBRARY}
+${METAL_LIBRARY}
+)
+
+add_library( MoltenVKShaderConverter STATIC
+${MOLTEN_VKSHADER_CONVERTER_SOURCES}
+${MOLTEN_VKSHADER_CONVERTER_PUBLIC_HEADERS}
+${MOLTEN_VKSHADER_CONVERTER_PROJECT_HEADERS}
+${MOLTEN_VKSHADER_CONVERTER_PRIVATE_HEADERS}
+${MOLTEN_VKSHADER_CONVERTER_RESOURCES}
+)
+
+target_include_directories( MoltenVKShaderConverter
+   PUBLIC
+../Common
+Common
+MoltenVKGLSLToSPIRVConverter
+MoltenVKSPIRVToMSLConverter
+)
+
+add_dependencies( MoltenVKShaderConverter MoltenVKSPIRVToMSLConverter-macOS)
+
+add_dependencies( MoltenVKShaderConverter MoltenVKGLSLToSPIRVConverter-macOS)
+
+install( TARGETS MoltenVKShaderConverter DESTINATION "lib")
+install( FILES ${MOLTEN_VKSHADER_CONVERTER_PUBLIC_HEADERS} DESTINATION "include/MoltenVKShaderConverter")
+
+
+##
+## MoltenVKShaderConverter_shared
+##
+
+add_library( MoltenVKShaderConverter_shared SHARED
+${MOLTEN_VKSHADER_CONVERTER_SOURCES}
+)
+
+set_target_properties( MoltenVKShaderConverter_shared
+   PROPERTIES
+   OUTPUT_NAME MoltenVKShaderConverter)
+)
+
+install( TARGETS MoltenVKShaderConverter_shared DESTINATION "lib")
+
+add_library( MoltenVKGLSLToSPIRVConverter-iOS STATIC
+${MOLTEN_VKGLSLTO_SPIRVCONVERTER_I_OS_SOURCES}
+${MOLTEN_VKGLSLTO_SPIRVCONVERTER_I_OS_PUBLIC_HEADERS}
+${MOLTEN_VKGLSLTO_SPIRVCONVERTER_I_OS_PROJECT_HEADERS}
+${MOLTEN_VKGLSLTO_SPIRVCONVERTER_I_OS_PRIVATE_HEADERS}
+${MOLTEN_VKGLSLTO_SPIRVCONVERTER_I_OS_RESOURCES}
+)
+
+target_include_directories( MoltenVKGLSLToSPIRVConverter-iOS
+   PUBLIC
+../Common
+Common
+MoltenVKGLSLToSPIRVConverter
+MoltenVKSPIRVToMSLConverter
+)
+
+install( TARGETS MoltenVKGLSLToSPIRVConverter-iOS DESTINATION "lib")
+install( FILES ${MOLTEN_VKGLSLTO_SPIRVCONVERTER_I_OS_PUBLIC_HEADERS} DESTINATION "include/MoltenVKGLSLToSPIRVConverter-iOS")
+
+
+##
+## MoltenVKGLSLToSPIRVConverter-iOS_shared
+##
+
+add_library( MoltenVKGLSLToSPIRVConverter-iOS_shared SHARED
+${MOLTEN_VKGLSLTO_SPIRVCONVERTER_I_OS_SOURCES}
+)
+
+set_target_properties( MoltenVKGLSLToSPIRVConverter-iOS_shared
+   PROPERTIES
+   OUTPUT_NAME MoltenVKGLSLToSPIRVConverter-iOS)
+)
+
+install( TARGETS MoltenVKGLSLToSPIRVConverter-iOS_shared DESTINATION "lib")
+
+add_library( MoltenVKGLSLToSPIRVConverter-macOS STATIC
+${MOLTEN_VKGLSLTO_SPIRVCONVERTER_MAC_OS_SOURCES}
+${MOLTEN_VKGLSLTO_SPIRVCONVERTER_MAC_OS_PUBLIC_HEADERS}
+${MOLTEN_VKGLSLTO_SPIRVCONVERTER_MAC_OS_PROJECT_HEADERS}
+${MOLTEN_VKGLSLTO_SPIRVCONVERTER_MAC_OS_PRIVATE_HEADERS}
+${MOLTEN_VKGLSLTO_SPIRVCONVERTER_MAC_OS_RESOURCES}
+)
+
+target_include_directories( MoltenVKGLSLToSPIRVConverter-macOS
+   PUBLIC
+../Common
+Common
+MoltenVKGLSLToSPIRVConverter
+MoltenVKSPIRVToMSLConverter
+)
+
+install( TARGETS MoltenVKGLSLToSPIRVConverter-macOS DESTINATION "lib")
+install( FILES ${MOLTEN_VKGLSLTO_SPIRVCONVERTER_MAC_OS_PUBLIC_HEADERS} DESTINATION "include/MoltenVKGLSLToSPIRVConverter-macOS")
+
+
+##
+## MoltenVKGLSLToSPIRVConverter-macOS_shared
+##
+
+add_library( MoltenVKGLSLToSPIRVConverter-macOS_shared SHARED
+${MOLTEN_VKGLSLTO_SPIRVCONVERTER_MAC_OS_SOURCES}
+)
+
+set_target_properties( MoltenVKGLSLToSPIRVConverter-macOS_shared
+   PROPERTIES
+   OUTPUT_NAME MoltenVKGLSLToSPIRVConverter-macOS)
+)
+
+install( TARGETS MoltenVKGLSLToSPIRVConverter-macOS_shared DESTINATION "lib")
+
+add_library( MoltenVKSPIRVToMSLConverter-iOS STATIC
+${MOLTEN_VKSPIRVTO_MSLCONVERTER_I_OS_SOURCES}
+${MOLTEN_VKSPIRVTO_MSLCONVERTER_I_OS_PUBLIC_HEADERS}
+${MOLTEN_VKSPIRVTO_MSLCONVERTER_I_OS_PROJECT_HEADERS}
+${MOLTEN_VKSPIRVTO_MSLCONVERTER_I_OS_PRIVATE_HEADERS}
+${MOLTEN_VKSPIRVTO_MSLCONVERTER_I_OS_RESOURCES}
+)
+
+target_include_directories( MoltenVKSPIRVToMSLConverter-iOS
+   PUBLIC
+../Common
+Common
+MoltenVKGLSLToSPIRVConverter
+MoltenVKSPIRVToMSLConverter
+)
+
+install( TARGETS MoltenVKSPIRVToMSLConverter-iOS DESTINATION "lib")
+install( FILES ${MOLTEN_VKSPIRVTO_MSLCONVERTER_I_OS_PUBLIC_HEADERS} DESTINATION "include/MoltenVKSPIRVToMSLConverter-iOS")
+
+
+##
+## MoltenVKSPIRVToMSLConverter-iOS_shared
+##
+
+add_library( MoltenVKSPIRVToMSLConverter-iOS_shared SHARED
+${MOLTEN_VKSPIRVTO_MSLCONVERTER_I_OS_SOURCES}
+)
+
+set_target_properties( MoltenVKSPIRVToMSLConverter-iOS_shared
+   PROPERTIES
+   OUTPUT_NAME MoltenVKSPIRVToMSLConverter-iOS)
+)
+
+install( TARGETS MoltenVKSPIRVToMSLConverter-iOS_shared DESTINATION "lib")
+
+add_library( MoltenVKSPIRVToMSLConverter-macOS STATIC
+${MOLTEN_VKSPIRVTO_MSLCONVERTER_MAC_OS_SOURCES}
+${MOLTEN_VKSPIRVTO_MSLCONVERTER_MAC_OS_PUBLIC_HEADERS}
+${MOLTEN_VKSPIRVTO_MSLCONVERTER_MAC_OS_PROJECT_HEADERS}
+${MOLTEN_VKSPIRVTO_MSLCONVERTER_MAC_OS_PRIVATE_HEADERS}
+${MOLTEN_VKSPIRVTO_MSLCONVERTER_MAC_OS_RESOURCES}
+)
+
+target_include_directories( MoltenVKSPIRVToMSLConverter-macOS
+   PUBLIC
+../Common
+Common
+MoltenVKGLSLToSPIRVConverter
+MoltenVKSPIRVToMSLConverter
+)
+
+install( TARGETS MoltenVKSPIRVToMSLConverter-macOS DESTINATION "lib")
+install( FILES ${MOLTEN_VKSPIRVTO_MSLCONVERTER_MAC_OS_PUBLIC_HEADERS} DESTINATION "include/MoltenVKSPIRVToMSLConverter-macOS")
+
+
+##
+## MoltenVKSPIRVToMSLConverter-macOS_shared
+##
+
+add_library( MoltenVKSPIRVToMSLConverter-macOS_shared SHARED
+${MOLTEN_VKSPIRVTO_MSLCONVERTER_MAC_OS_SOURCES}
+)
+
+set_target_properties( MoltenVKSPIRVToMSLConverter-macOS_shared
+   PROPERTIES
+   OUTPUT_NAME MoltenVKSPIRVToMSLConverter-macOS)
+)
+
+install( TARGETS MoltenVKSPIRVToMSLConverter-macOS_shared DESTINATION "lib")
diff --git a/MoltenVKShaderConverter/CMakeSourcesAndHeaders.txt b/MoltenVKShaderConverter/CMakeSourcesAndHeaders.txt
new file mode 100644
index 0000000..4623d68
--- /dev/null
+++ b/MoltenVKShaderConverter/CMakeSourcesAndHeaders.txt
@@ -0,0 +1,149 @@
+# Generated on 2019-11-10 1:31:51 by version 0.9.0 of mulle-xcode-to-cmake
+# Command line:
+#    mulle-xcode-to-cmake -2 -d sexport MoltenVKShaderConverter.xcodeproj
+
+
+
+##
+## MoltenVKShaderConverter Files
+##
+
+set( MOLTEN_VKSHADER_CONVERTER_SOURCES
+../Common/MVKOSExtensions.mm
+Common/SPIRVSupport.cpp
+MoltenVKShaderConverterTool/MoltenVKShaderConverterTool.cpp
+MoltenVKShaderConverterTool/OSSupport.mm
+MoltenVKShaderConverterTool/main.cpp
+)
+
+
+##
+## MoltenVKGLSLToSPIRVConverter-iOS Files
+##
+
+set( MOLTEN_VKGLSLTO_SPIRVCONVERTER_I_OS_INCLUDE_DIRS
+../Common
+Common
+MoltenVKGLSLToSPIRVConverter
+)
+
+set( MOLTEN_VKGLSLTO_SPIRVCONVERTER_I_OS_PUBLIC_HEADERS
+)
+
+set( MOLTEN_VKGLSLTO_SPIRVCONVERTER_I_OS_PROJECT_HEADERS
+../Common/MVKCommonEnvironment.h
+../Common/MVKStrings.h
+Common/SPIRVSupport.h
+MoltenVKGLSLToSPIRVConverter/GLSLConversion.h
+MoltenVKGLSLToSPIRVConverter/GLSLToSPIRVConverter.h
+)
+
+set( MOLTEN_VKGLSLTO_SPIRVCONVERTER_I_OS_PRIVATE_HEADERS
+)
+
+set( MOLTEN_VKGLSLTO_SPIRVCONVERTER_I_OS_SOURCES
+Common/SPIRVSupport.cpp
+MoltenVKGLSLToSPIRVConverter/GLSLConversion.mm
+MoltenVKGLSLToSPIRVConverter/GLSLToSPIRVConverter.cpp
+)
+
+
+##
+## MoltenVKGLSLToSPIRVConverter-macOS Files
+##
+
+set( MOLTEN_VKGLSLTO_SPIRVCONVERTER_MAC_OS_INCLUDE_DIRS
+../Common
+Common
+MoltenVKGLSLToSPIRVConverter
+)
+
+set( MOLTEN_VKGLSLTO_SPIRVCONVERTER_MAC_OS_PUBLIC_HEADERS
+)
+
+set( MOLTEN_VKGLSLTO_SPIRVCONVERTER_MAC_OS_PROJECT_HEADERS
+../Common/MVKCommonEnvironment.h
+../Common/MVKStrings.h
+Common/SPIRVSupport.h
+MoltenVKGLSLToSPIRVConverter/GLSLConversion.h
+MoltenVKGLSLToSPIRVConverter/GLSLToSPIRVConverter.h
+)
+
+set( MOLTEN_VKGLSLTO_SPIRVCONVERTER_MAC_OS_PRIVATE_HEADERS
+)
+
+set( MOLTEN_VKGLSLTO_SPIRVCONVERTER_MAC_OS_SOURCES
+Common/SPIRVSupport.cpp
+MoltenVKGLSLToSPIRVConverter/GLSLConversion.mm
+MoltenVKGLSLToSPIRVConverter/GLSLToSPIRVConverter.cpp
+)
+
+
+##
+## MoltenVKSPIRVToMSLConverter-iOS Files
+##
+
+set( MOLTEN_VKSPIRVTO_MSLCONVERTER_I_OS_INCLUDE_DIRS
+../Common
+Common
+MoltenVKGLSLToSPIRVConverter
+MoltenVKSPIRVToMSLConverter
+)
+
+set( MOLTEN_VKSPIRVTO_MSLCONVERTER_I_OS_PUBLIC_HEADERS
+)
+
+set( MOLTEN_VKSPIRVTO_MSLCONVERTER_I_OS_PROJECT_HEADERS
+../Common/MVKCommonEnvironment.h
+../Common/MVKStrings.h
+Common/SPIRVSupport.h
+MoltenVKSPIRVToMSLConverter/SPIRVConversion.h
+MoltenVKSPIRVToMSLConverter/SPIRVReflection.h
+MoltenVKSPIRVToMSLConverter/SPIRVToMSLConverter.h
+)
+
+set( MOLTEN_VKSPIRVTO_MSLCONVERTER_I_OS_PRIVATE_HEADERS
+)
+
+set( MOLTEN_VKSPIRVTO_MSLCONVERTER_I_OS_SOURCES
+Common/SPIRVSupport.cpp
+MoltenVKSPIRVToMSLConverter/FileSupport.mm
+MoltenVKSPIRVToMSLConverter/SPIRVConversion.mm
+MoltenVKSPIRVToMSLConverter/SPIRVReflection.cpp
+MoltenVKSPIRVToMSLConverter/SPIRVToMSLConverter.cpp
+)
+
+
+##
+## MoltenVKSPIRVToMSLConverter-macOS Files
+##
+
+set( MOLTEN_VKSPIRVTO_MSLCONVERTER_MAC_OS_INCLUDE_DIRS
+../Common
+Common
+MoltenVKGLSLToSPIRVConverter
+MoltenVKSPIRVToMSLConverter
+)
+
+set( MOLTEN_VKSPIRVTO_MSLCONVERTER_MAC_OS_PUBLIC_HEADERS
+)
+
+set( MOLTEN_VKSPIRVTO_MSLCONVERTER_MAC_OS_PROJECT_HEADERS
+../Common/MVKCommonEnvironment.h
+../Common/MVKStrings.h
+Common/SPIRVSupport.h
+MoltenVKSPIRVToMSLConverter/SPIRVConversion.h
+MoltenVKSPIRVToMSLConverter/SPIRVReflection.h
+MoltenVKSPIRVToMSLConverter/SPIRVToMSLConverter.h
+)
+
+set( MOLTEN_VKSPIRVTO_MSLCONVERTER_MAC_OS_PRIVATE_HEADERS
+)
+
+set( MOLTEN_VKSPIRVTO_MSLCONVERTER_MAC_OS_SOURCES
+Common/SPIRVSupport.cpp
+MoltenVKSPIRVToMSLConverter/FileSupport.mm
+MoltenVKSPIRVToMSLConverter/SPIRVConversion.mm
+MoltenVKSPIRVToMSLConverter/SPIRVReflection.cpp
+MoltenVKSPIRVToMSLConverter/SPIRVToMSLConverter.cpp
+)
-- 
2.23.0

