{% set name = "traits" %}
{% set version = "4.6.0" %}
{% set file_ext = "tar.bz2" %}
{% set hash_type = "sha256" %}
{% set hash_value = "c71c3165526e5375f74358968fd70a258a65d6c8768210ee4e4f88347a4ab853" %}

package:
  name: '{{ name|lower }}'
  version: '{{ version }}'

source:
  fn: '{{ name }}-{{ version }}.{{ file_ext }}'
  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.{{ file_ext }}
  '{{ hash_type }}': '{{ hash_value }}'

build:
  number: 0
  script: python setup.py install --single-version-externally-managed --record=record.txt

requirements:
  host:
    - python
    - setuptools
  run:
    - python

test:
  imports:
    - traits
    - traits.adaptation
    - traits.adaptation.tests
    - traits.etsconfig
    - traits.etsconfig.tests
    - traits.protocols
    - traits.testing
    - traits.testing.tests
    - traits.tests
    - traits.util
    - traits.util.tests

about:
  home: http://docs.enthought.com/traits
  license: BSD License
  license_family: BSD
  license_file: ''
  summary: explicitly typed attributes for Python
  description: "==============================================\ntraits: explicitly typed attributes for Python\n==============================================\n\nhttp://docs.enthought.com/traits\n\n.. image::\
    \ https://api.travis-ci.org/enthought/traits.png?branch=master\n   :target: https://travis-ci.org/enthought/traits\n   :alt: Build status\n\n.. image:: https://coveralls.io/repos/enthought/traits/badge.png\n\
    \   :target: https://coveralls.io/r/enthought/traits\n   :alt: Coverage status\n\nThe Traits project is at the center of all Enthought Tool Suite development\nand has changed the mental model used at\
    \ Enthought for programming in the\nalready extremely efficient Python programming language. We encourage everyone\nto join us in enjoying the productivity gains from using such a powerful\napproach.\n\
    \nThe Traits project allows Python programmers to use a special kind of type\ndefinition called a *trait*, which gives object attributes some additional\ncharacteristics:\n\n- **Initialization**: A\
    \ trait has a *default value*, which is\n  automatically set as the initial value of an attribute before its\n  first use in a program.\n- **Validation**: The type of a trait attribute is *explicitly\
    \ declared*. The\n  type is evident in the code, and only values that meet a\n  programmer-specified set of criteria (i.e., the trait definition) can\n  be assigned to that attribute.\n- **Delegation**:\
    \ The value of a trait attribute can be contained either\n  in the defining object or in another object *delegated* to by the\n  trait.\n- **Notification**: Setting the value of a trait attribute can\
    \ *notify*\n  other parts of the program that the value has changed.\n- **Visualization**: User interfaces that allow a user to *interactively\n  modify* the value of a trait attribute can be automatically\n\
    \  constructed using the trait's definition. (This feature requires that\n  a supported GUI toolkit be installed. If this feature is not used, the\n  Traits project does not otherwise require GUI support.)\n\
    \nA class can freely mix trait-based attributes with normal Python attributes,\nor can opt to allow the use of only a fixed or open set of trait attributes\nwithin the class. Trait attributes defined\
    \ by a class are automatically\ninherited by any subclass derived from the class.\n\nDependencies\n------------\n\nTraits has the following optional dependencies:\n\n* `NumPy <http://pypi.python.org/pypi/numpy>`_\
    \ to support the trait types\n  for arrays.\n* `Traitsui <https://pypi.python.org/pypi/traitsui>`_ to support Gui\n  Views.\n\nTo build the full documentation one needs:\n\n* sphinx > 1.2.3\n* mock\
    \ (optional if traitsui is not available)"
  doc_url: ''
  dev_url: ''

extra:
  recipe-maintainers: ''
